orbs:
  aws-sg-white-list-circleci-ip: inokappa/aws-sg-white-list-circleci-ip@0.0.3
  aws-cli: circleci/aws-cli@4.1.3
  slack: circleci/slack@4.13.3
version: 2.1
jobs:
  build_and_test:
    docker:
      # specify the version you desire here
      # use `-browsers` prefix for selenium tests, e.g. `3.6.1-browsers`
      - image: cimg/python:3.8.15
        environment:
          CIRCLECI: true
          PGHOST: 127.0.0.1
          RUN_ENV: test
      - image: cimg/postgres:12.15
        environment:
          POSTGRES_USER: ynr
          POSTGRES_DB: ynr
      - image: cimg/redis:6.2.6


      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/

    working_directory: ~/repo

    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
           keys:
             - v6-dependencies-{{ checksum "requirements/base.txt" }}-{{ checksum "requirements/sopn_parsing.txt" }}-{{ checksum "requirements/testing.txt" }}
      - run:
          name: Install APT packages
          command: |
            sudo rm -rf /var/lib/apt/lists/*
            sudo apt-get update
            sudo apt-get install python-tk ghostscript
      - run:
          name: Install pandoc
          command: |
            wget https://github.com/jgm/pandoc/releases/download/2.17.1.1/pandoc-2.17.1.1-1-amd64.deb
            sudo dpkg -i pandoc-2.17.1.1-1-amd64.deb
            sudo apt install texlive-latex-base texlive-latex-extra
      - run:
          name: Create venv
          command: |
            python -m venv .venv
            . .venv/bin/activate
            pip install -U pip
      - run:
          name: Install Coveralls
          command: |
            . .venv/bin/activate
            pip install coveralls
      - run:
          name: install dependencies
          command: |
            . .venv/bin/activate
            pip install -r requirements/testing.txt

      - save_cache:
          paths:
            - .venv
          key: v6-dependencies-{{ checksum "requirements/base.txt" }}-{{ checksum "requirements/sopn_parsing.txt" }}-{{ checksum "requirements/testing.txt" }}

      - run:
          name: Pre test checks
          environment:
            CIRCLECI: true
            RUN_ENV: test
          command: |
            . .venv/bin/activate
            pip check
            ruff .
            ruff format .
            python manage.py check
            python manage.py makemigrations --check
      - run:
          name: run tests
          environment:
            CIRCLECI: true
            RUN_ENV: test
          command: |
            . .venv/bin/activate
            pytest -x --cov-report= --cov --junitxml=test-results/junit.xml

      # Coverage
      - run:
          name: Update Coveralls
          command: |
            . .venv/bin/activate
            coveralls

      - store_test_results:
          path: test-results

      - store_artifacts:
          path: test-results

  deploy:
    docker:
      - image: cimg/python:3.8.15
        environment:
          CIRCLECI: true
          PGHOST: 127.0.0.1
          RUN_ENV: test
    working_directory: ~/repo
    steps:
      - checkout
      - aws-cli/setup
      - restore_cache:
          keys:
            - v1-deploy-{{ checksum "requirements/deploy.txt" }}
      - run:
          name: Create venv
          command: |
            python -m venv .venv
            . .venv/bin/activate
            pip install -U pip
      - run:
          name: install dependencies
          command: |
            . .venv/bin/activate
            pip install -r requirements/deploy.txt
      - aws-sg-white-list-circleci-ip/add:
          group-id: sg-807bc0e9
          port: 22
      - run:
          name: Ansible Deploy
          command: |
            . .venv/bin/activate
            cd deploy
            ansible-playbook deploy.yml -e branch=$CIRCLE_SHA1
      - aws-sg-white-list-circleci-ip/del:
          group-id: sg-807bc0e9
          port: 22
      - save_cache:
          paths:
            - .venv
          key: v1-deploy-{{ checksum "requirements/deploy.txt" }}
                        
      - slack/notify:
          event: fail
          template: basic_fail_1

  container_build:
    working_directory: ~/repo
    docker:
      - image: cimg/base:current
      - image: cimg/postgres:12.20
        name: dbpsql
        environment:
          POSTGRES_USER: ynr
          POSTGRES_DB: ynr
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Build production container image
          command: docker build -t ynr:prod --target prod .
      - run:
          name: Build test container image
          command: docker build -t ynr:test --target test .
      - run:
          name: Run app tests
          command: |
            net="$(docker network inspect $(docker network ls -q -f "label=task-network") --format '{{.Name}}')"
            docker run -it --rm \
              --net="$net" \
              -e RUN_ENV=test \
              -e PGHOST=dbpsql \
              -e CIRCLECI=true \
              \
              ynr:test \
              pytest --ds=ynr.settings.testing -x

workflows:
  test_build_deploy:
    jobs:
    - build_and_test
    - deploy:
        requires:
        - build_and_test
        filters: { branches: { only: [ main, master, deployment-upgrades] } }
        context: [ deployment-production-ynr, slack-secrets ]
  container:
    jobs:
    - container_build
