orbs:
  aws-sg-white-list-circleci-ip: inokappa/aws-sg-white-list-circleci-ip@0.0.3
  aws-cli: circleci/aws-cli@4.1.3
  slack: circleci/slack@4.13.3
version: 2.1

jobs:
  build_and_test:
    docker:
      # specify the version you desire here
      # use `-browsers` prefix for selenium tests, e.g. `3.6.1-browsers`
      - image: cimg/python:3.8.15
        environment:
          CIRCLECI: true
          PGHOST: 127.0.0.1
          RUN_ENV: test
      - image: cimg/postgres:12.15
        environment:
          POSTGRES_USER: ynr
          POSTGRES_DB: ynr
      - image: cimg/redis:6.2.6


      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/

    working_directory: ~/repo

    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
           keys:
             - v6-dependencies-{{ checksum "requirements/base.txt" }}-{{ checksum "requirements/sopn_parsing.txt" }}-{{ checksum "requirements/testing.txt" }}
      - run:
          name: Install APT packages
          command: |
            sudo rm -rf /var/lib/apt/lists/*
            sudo apt-get update
            sudo apt-get install python-tk ghostscript
      - run:
          name: Install pandoc
          command: |
            wget https://github.com/jgm/pandoc/releases/download/2.17.1.1/pandoc-2.17.1.1-1-amd64.deb
            sudo dpkg -i pandoc-2.17.1.1-1-amd64.deb
            sudo apt install texlive-latex-base texlive-latex-extra
      - run:
          name: Create venv
          command: |
            python -m venv .venv
            . .venv/bin/activate
            pip install -U pip
      - run:
          name: Install Coveralls
          command: |
            . .venv/bin/activate
            pip install coveralls
      - run:
          name: install dependencies
          command: |
            . .venv/bin/activate
            pip install -r requirements/testing.txt

      - save_cache:
          paths:
            - .venv
          key: v6-dependencies-{{ checksum "requirements/base.txt" }}-{{ checksum "requirements/sopn_parsing.txt" }}-{{ checksum "requirements/testing.txt" }}

      - run:
          name: Pre test checks
          environment:
            CIRCLECI: true
            RUN_ENV: test
          command: |
            . .venv/bin/activate
            pip check
            ruff .
            ruff format . --check
            DJANGO_SECRET_KEY=fake python manage.py check
            DJANGO_SECRET_KEY=fake python manage.py makemigrations --check
      - run:
          name: run tests
          environment:
            CIRCLECI: true
            RUN_ENV: test
          command: |
            . .venv/bin/activate
            pytest -x --cov-report= --cov --junitxml=test-results/junit.xml

      # Coverage
      - run:
          name: Update Coveralls
          command: |
            . .venv/bin/activate
            coveralls

      - store_test_results:
          path: test-results

      - store_artifacts:
          path: test-results

  db_migrate:
    docker:
      - image: cimg/base:current
    steps:
      - checkout
      - aws-cli/setup
      - run:
          name: Run any outstanding migrations
          command: |
            ./scripts/ci/dbmigrate.sh
  deploy:
    docker:
      - image: cimg/python:3.8.15
        environment:
          CIRCLECI: true
          PGHOST: 127.0.0.1
          RUN_ENV: test
    working_directory: ~/repo
    steps:
      - checkout
      - aws-cli/setup
      - restore_cache:
          keys:
            - v1-deploy-{{ checksum "requirements/deploy.txt" }}
      - run:
          name: Create venv
          command: |
            python -m venv .venv
            . .venv/bin/activate
            pip install -U pip
      - run:
          name: install dependencies
          command: |
            . .venv/bin/activate
            pip install -r requirements/deploy.txt
      - aws-sg-white-list-circleci-ip/add:
          group-id: sg-807bc0e9
          port: 22
      - run:
          name: Ansible Deploy
          command: |
            . .venv/bin/activate
            cd deploy
            ansible-playbook deploy.yml -e branch=$CIRCLE_SHA1
      - aws-sg-white-list-circleci-ip/del:
          group-id: sg-807bc0e9
          port: 22
      - save_cache:
          paths:
            - .venv
          key: v1-deploy-{{ checksum "requirements/deploy.txt" }}
                        
      - slack/notify:
          event: fail
          template: basic_fail_1

  static_tests:
    working_directory: ~/repo
    docker:
      - image: cimg/python:3.8.15-node
    steps:
      - checkout
      - run:
          name: Create venv and install Python and Node dependencies
          command: |
            python -m venv .venv
            . .venv/bin/activate
            pip install -r requirements/testing.txt
            npm install --save=false .
      - run:
          name: Pre test checks
          environment:
            CIRCLECI: true
            RUN_ENV: test
          command: |
            . .venv/bin/activate
            pip check
            ruff .
            ruff format . --check
            DJANGO_SECRET_KEY=fake python manage.py check
            DJANGO_SECRET_KEY=fake python manage.py makemigrations --check

  container_test_build_and_push:
    working_directory: ~/repo
    docker:
      - image: cimg/base:current
      - image: cimg/postgres:16.4
        name: dbpsql
        environment:
          POSTGRES_USER: ynr
          POSTGRES_DB: ynr
    steps:
      - checkout
      - aws-cli/setup
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Build container images
          command: |
            ./scripts/container.image.build.bash prod
            ./scripts/container.image.build.bash test
      - run:
          name: Check that compose is happy
          command: |
            docker compose version
            docker compose config
            # No-op, due to a shared layer cache with earlier image builds.
            docker compose build
      - run:
          name: Run app tests
          command: |
            net="$(docker network inspect $(docker network ls -q -f "label=task-network") --format '{{.Name}}')"
            docker run -it --rm \
              --net="$net" \
              -e PGHOST=dbpsql \
              -e CIRCLECI=true \
              \
              ynr:test \
              pytest -x --ignore=node_modules

      - run:
          name: Save the deterministic tag for later
          command: |
            # We need to push the image in order for the digest to be calculated
            docker tag ynr:prod public.ecr.aws/h3q9h5r7/dc-test/ynr:temp
            aws ecr-public get-login-password --profile default --region us-east-1 | docker login --username AWS --password-stdin public.ecr.aws/h3q9h5r7/dc-test/ynr
            docker push public.ecr.aws/h3q9h5r7/dc-test/ynr:temp
            echo "Determine the tag"
            docker inspect --format="{{index .RepoDigests 0}}" ynr:prod | cut -d: -f 2 | tee manifest-tag

      - persist_to_workspace:
          root: .
          paths:
            - manifest-tag

      - run:
          name: Push the image with a deterministic tag
          command: |
              TAG=$(cat manifest-tag)
              echo Using the tag ${TAG}
              docker tag ynr:prod public.ecr.aws/h3q9h5r7/dc-test/ynr:${TAG}
              aws ecr-public get-login-password --profile default --region us-east-1 | docker login --username AWS --password-stdin public.ecr.aws/h3q9h5r7/dc-test/ynr
              docker push public.ecr.aws/h3q9h5r7/dc-test/ynr:${TAG}

  deploy_cdk_environment:
    docker:
      - image: cimg/python:3.8.15-node
    working_directory: ~/repo/
    parameters:
        dc-environment:
          type: enum
          enum: [ development, staging, production ]
    environment:
      DC_ENVIRONMENT: "<<parameters.dc-environment>>"
    steps:
      - checkout
      - aws-cli/setup
      - run:
          name: Create CDK venv and install Python and Node dependencies
          command: |
            python -m venv ./cdk/venv
            . ./cdk/venv/bin/activate
            pip install -r requirements/cdk.txt
            npm install --save=false .
      - run:
          name: Show would-be changes in the stack
          command: |
            . ./cdk/venv/bin/activate
            npx cdk diff

      - run:
          name: Deploy CDK stack infra
          command: |
            . ./cdk/venv/bin/activate
            npx cdk deploy --verbose --require-approval never --progress events
      # Because we use stable image tags we need to force a redeploy of the
      # service when the container is updated
      - run:
          name: Force deploy the service to pick up the new image
          command: |
              IMAGE_TAG="${CIRCLE_SHA1:0:7}"
              ./scripts/ci/update-ecs-task.sh $IMAGE_TAG
      - run:
          name: Wait for the service to stabilise
          command: ./scripts/ci/wait-for-stable-ecs-service.sh

  tag_container_for_environment:
    docker:
      - image: cimg/python:3.8.15-node
    working_directory: ~/repo/
    parameters:
        dc-environment:
          type: enum
          enum: [ development, staging, production ]
    environment:
      DC_ENVIRONMENT: "<<parameters.dc-environment>>"
    steps:
      - checkout
      - aws-cli/setup
      - setup_remote_docker:
          docker_layer_caching: true

      - attach_workspace:
          at: .

      - run:
          name: Push the image with a stable tag for the environment
          command: |
              TAG=$(cat manifest-tag)
              docker pull public.ecr.aws/h3q9h5r7/dc-test/ynr:${TAG}
              docker tag public.ecr.aws/h3q9h5r7/dc-test/ynr:${TAG} public.ecr.aws/h3q9h5r7/dc-test/ynr:<< parameters.dc-environment>>
              aws ecr-public get-login-password --profile default --region us-east-1 | docker login --username AWS --password-stdin public.ecr.aws/h3q9h5r7/dc-test/ynr
              docker push public.ecr.aws/h3q9h5r7/dc-test/ynr:<< parameters.dc-environment>>

  cdk_test:
    docker:
      - image: cimg/python:3.8.15-node
    working_directory: ~/repo/
    parameters:
        dc-environment:
          type: enum
          enum: [ development, staging, production ]
    environment:
      DC_ENVIRONMENT: "<<parameters.dc-environment>>"
    steps:
      - checkout
      - run:
          name: Create CDK venv and install Python and Node dependencies
          command: |
            python -m venv ./cdk/venv
            . ./cdk/venv/bin/activate
            pip install -r requirements/cdk.txt
            npm install --save=false .
      - run:
          name: Check that CDK stacks synthesise
          command: |
            . ./cdk/venv/bin/activate
            npx cdk synth
      - run:
          name: Run CDK tests
          command: |
            . ./cdk/venv/bin/activate
            pytest ./cdk


workflows:
  test_build_deploy:
    jobs:
    - build_and_test
    - deploy:
        requires:
        - build_and_test
        filters: { branches: { only: [ main, master, deployment-upgrades] } }
        context: [ deployment-production-ynr, slack-secrets ]
  container:
    jobs:
      ##########
      # All envs
      ##########
      - static_tests:
          context: [ deployment-ecs-development-ynr ]
      - cdk_test:
          context: [ deployment-ecs-development-ynr ]
          dc-environment: development

      #############
      # Development
      #############
      - container_test_build_and_push:
          name: "DEV build container"
          requires:
            - static_tests
          context: [ deployment-ecs-development-ynr ]
          filters: { branches: { only: [ "ci/test"] } }
      - tag_container_for_environment:
          name: DEV container tag
          context: [ deployment-ecs-development-ynr ]
          requires:
            - DEV build container
          filters: { branches: { only: [ "ci/test"] } }
          dc-environment: development
      - deploy_cdk_environment:
          name: DEV cdk deploy
          context: [ deployment-ecs-development-ynr ]
          requires:
            - cdk_test
            - DEV container tag
          filters: { branches: { only: [ "ci/test"] } }
          dc-environment: development
      - db_migrate:
          name: DEV db migrate
          requires:
            - DEV cdk deploy
          context: [ deployment-ecs-development-ynr ]
          filters: { branches: { only: [ "ci/test"] } }

      #########
      # Staging
      #########
      - container_test_build_and_push:
          name: "STAGING build container"
          requires:
            - static_tests
          # One might expect to see the staging context here, but the
          # development one is required because that's the account where the
          # AWS ECR registry is found
          context: [ deployment-ecs-development-ynr ]
          filters: { branches: { only: [ "staging", "feature/create_staging_env" ] } }
      - tag_container_for_environment:
          name: STAGING container tag
          # One might expect to see the staging context here, but the
          # development one is required because that's the account where the
          # AWS ECR registry is found
          context: [ deployment-ecs-development-ynr ]
          requires:
            - STAGING build container
          filters: { branches: { only: [ "staging", "feature/create_staging_env" ] } }
          dc-environment: staging
      - deploy_cdk_environment:
          name: STAGING cdk deploy
          context: [ deployment-ecs-staging-ynr ]
          requires:
            - cdk_test
            - STAGING container tag
          filters: { branches: { only: [ "staging", "feature/create_staging_env" ] } }
          dc-environment: staging
      - db_migrate:
          name: STAGING db migrate
          requires:
            - STAGING cdk deploy
          context: [ deployment-ecs-staging-ynr ]
          filters: { branches: { only: [ "staging", "feature/create_staging_env" ] } }
