from public.ecr.aws/lts/ubuntu:20.04

ARG DEBIAN_FRONTEND=noninteractive

run date \
 && apt update \
 && date

run date \
 && apt install --no-install-suggests --assume-yes \
        build-essential \
        bundler \
        cmake \
        curl \
        gettext \
        git \
        language-pack-en \
        libavcodec-dev \
        libavformat-dev \
        libevent-dev \
        libffi-dev \
        libgtk2.0-dev \
        libjpeg-dev \
        libpq-dev \
        libssl-dev \
        libxml2-dev \
        libxslt-dev \
        libyaml-dev \
        npm \
	python3.8-venv \
        opencv-data \
        postgis \
        python-is-python3 \
        python3-dev \
        python3-pip \
        python3-psycopg2 \
        python3-setuptools \
        python3-virtualenv \
        s3cmd \
        unzip \
        yui-compressor \
 && date

run date \
 && apt-get clean \
 && rm -rf /var/lib/apt/lists/* \
 && date

# Set a base path for the app install build process.
arg APP_ROOT=/dc/ynr
# Set a path for the app's virtualenv
arg APP_VENV=$APP_ROOT/venv
# Set the working directory for the following RUN/COPY/ADD/CMD directives.
workdir $APP_ROOT

# Copy the client-side directory "." (i.e. the build context passed to the
# build command) into the container image.
# NB This obeys the rules in the .containerignore file.
copy . code/

# Set up a virtualenv to avoid interactions with system packages, and install a
# common pre-req.
run date \
 && python -m venv $APP_VENV \
 && $APP_VENV/bin/pip install wheel \
 && date
# Use the virtualenv without explicit activation.
ENV PATH="$APP_VENV/bin:$PATH"

# Install basic app requirements. Instruct pip not to use a cache directory to
# inprove container-image-level cache effectiveness.
# TODO: run as not-root?
# TODO: run upgrade pip?
run date \
 && pip install --no-cache-dir -r code/requirements.txt \
 && date
