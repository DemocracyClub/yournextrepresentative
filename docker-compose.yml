version: '3'

name: ynr-dev

volumes:
  psql-data:

services:

  frontend:
    image: ynr:test
    command: gunicorn --reload --log-level=debug ynr.wsgi
    env_file:
      - path: env/frontend.env
        required: false
    environment:
      PGHOST: dbpsql
      PORT: 8080
    volumes:
      - ./ynr/:/dc/ynr/code/ynr/
      - ./requirements/:/dc/ynr/code/requirements/
      - ./requirements.txt:/dc/ynr/code/requirements.txt
      - ./manage.py:/dc/ynr/code/manage.py
      - ./Makefile:/dc/ynr/code/Makefile
      - ./scripts/:/dc/ynr/code/scripts/
      - ./gulpfile.js:/dc/ynr/code/gulpfile.js
      - ./package.json:/dc/ynr/code/package.json
      - ./package-lock.json:/dc/ynr/code/package-lock.json
      - ./pyproject.toml:/dc/ynr/code/pyproject.toml
    ports:
      - "8080:8080"
    depends_on:
      dbpsql:
        condition: service_healthy
    pull_policy: never
    build:
      dockerfile: container/build/Containerfile
      # Context is relative to this docker-compose.yml file.
      context: .
      target: test

  dbpsql:
    image: public.ecr.aws/docker/library/postgres:16.4
    pull_policy: missing
    environment:
      POSTGRES_DB: ynr
      POSTGRES_USER: ynr
      # This is completely insecure: all connections are trusted, without a password.
      POSTGRES_HOST_AUTH_METHOD: trust
    volumes:
      - psql-data:/var/lib/postgresql/data
    ports:
      - 54321:5432
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d ynr"]
      interval: 10s
      timeout: 5s
      retries: 5
