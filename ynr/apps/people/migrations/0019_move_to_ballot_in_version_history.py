# Generated by Django 2.2.9 on 2020-02-23 10:42
import json

from django.db import migrations
from django.db.models import Q

election_slug_fixes = {
    "local.st-edmondsbury.haverhill-north.2016-05-05": "local.st-edmundsbury.2016-05-05",
    "mayor.liverpool.2017-05-04": "mayor.liverpool-city-ca.2017-05-04",
    "mayor.greater-manchester.2017-05-04": "mayor.greater-manchester-ca.2017-05-04",
    "local.hampshire.headley.2016-05-05": "local.hampshire.2016-05-05",
    "naw-2016-05-05-r": "naw.c.2016-05-05",
    "naw-2016-05-05-c": "naw.r.2016-05-05",
    "gb-sp-2016-05-05-r": "sp.r.2016-05-05",
    "gb-sp-2016-05-05-c": "sp.c.2016-05-05",
    "sp-2016-05-05-c": "sp.r.2016-05-05",
    "local.north-dorset.hill-forts.2016-05-05": "local.north-dorset.2016-05-05",
    "local.havering.heaton.2016-05-05": "local.havering.2016-05-05",
    "local.romford.heaton.2016-05-05": "local.havering.2016-05-05",
    "local.lancaster.john-ogaunt.2016-05-05": "local.lancaster.2016-05-05",
    "local.southwark.newington.2016-05-05": "local.southwark.2016-05-05",
    "parl.sheffield.sheffield-brightside-and-hillsborough.2016-05-05": "parl.2016-05-05",
    "local.hackney.stoke-newington.2016-05-05": "local.hackney.2016-05-05",
    "parl.copeland.2017-02-23": "parl.2017-02-23",
    "local.greenwich.glyndon-ward.2016-05-05": "local.greenwich.2016-05-05",
    "local.suffolk.haverhill-cangle.2016-05-05": "local.suffolk.2016-05-05",
    "local.hackney.hackney-downs.2016-05-05": "local.hackney.2016-05-05",
    "local.torquay.tormohun.2016-05-05": "local.torbay.2016-05-05",
    "local.forest-heath.brandon-west.2016-05-05": "local.forest-heath.2016-05-05",
    "local.forest-heath.south.2016-05-05": "local.forest-heath.2016-05-05",
    "local.hampshire.fareham-town.2016-05-05": "local.hampshire.2016-05-05",
    "local.lancaster.carnforth-and-millhead.2016-05-05": "local.lancaster.2016-05-05",
    "local.north-dorset.blandford-hilltop.2016-05-05": "local.north-dorset.2016-05-05",
    "local.southwark.college.2016-05-05": "local.southwark.2016-05-05",
    "local.suffolk.bixley.2016-05-05": "local.suffolk.2016-05-05",
    "parl.stoke-on-trent-central.2017-02-23": "parl.2017-02-23",
    "parl.bridgend.ogmore.2016-05-05": "parl.2016-05-05",
    "local.glasgow.2016-05-05": "local.glasgow-city.2016-05-05",
}

with open("ynr/apps/people/migrations/0019_post_slug_fixes.json") as f:
    post_slug_fixes = json.load(f)


with open("ynr/apps/people/migrations/parl_mapit_to_gss.json") as f:
    mapit_id_to_gss = json.load(f)


def move_to_ballot_in_version_history(apps, schema_editor):
    Person = apps.get_model("people", "Person")
    Ballot = apps.get_model("candidates", "Ballot")
    Party = apps.get_model("parties", "Party")

    party_legacy_id_to_ec_id = {}
    for party in Party.objects.all():
        party_legacy_id_to_ec_id[party.legacy_slug] = party.ec_id

    def get_party_from_version(election_id, version):
        party_id = version["data"]["party_memberships"][election_id]["id"]
        try:
            return party_legacy_id_to_ec_id[party_id]
        except KeyError:
            return party_legacy_id_to_ec_id["minor-{}".format(party_id)]

    ballot_cache = {}

    def get_ballot_from_cache(election_id, post_id):
        key = "--".join([election_id, post_id])
        if key not in ballot_cache:
            ballot_cache[key] = (
                Ballot.objects.filter(
                    Q(post__postidentifier__identifier=post_id)
                    | Q(post__slug=post_id)
                )
                .distinct()
                .get(election__slug=election_id)
            )
        return ballot_cache[key]

    for person in Person.objects.all():
        versions = person.versions
        for i, version in enumerate(versions):
            data = version["data"]
            data["candidacies"] = {}
            for election_id, candidacy in data.get("standing_in", {}).items():
                if not candidacy:
                    continue

                election_slugs = [
                    "local.glasgow-city.2017-05-04",
                    "local.wyre-forest.2016-05-05",
                    "local.torfaen.2017-05-04",
                    "local.south-derbyshire.2017-05-04",
                ]
                post_slugs = [
                    "UTW:S13002652",
                    "UTE:W05000778",
                    "NODATA:E07000239-greenhill",
                    "NODATA:E07000239-rock",
                    "DIW:E05008823",
                ]

                if (
                    election_id in election_slugs
                    and candidacy["post_id"] in post_slugs
                ):
                    """
                    These are versions with a very special set of
                    circumstances:

                    1. A post was made incorrectly in YNR (incorrect because
                       it stoped existing after a boundary change, but we
                       imported it to the site before knowing that)
                    2. The post was in place over SOPN day
                    3. A user used the “bulk adding form” and didn’t spot
                       that the post name and the ward name on the SOPN
                       didn’t match (“The First Page Problem”)
                    4. The post was removed at some point, but the version
                       history shows the old, incorrect nomination still

                    In this case, we'll just delete the version, as it's not
                    useful at all.
                    """
                    del versions[i]
                    continue

                initial_election_id = election_id
                election_id = election_slug_fixes.get(election_id, election_id)
                if not candidacy:
                    not_standing = data.get("not_standing", set())
                    not_standing.add(election_id)
                    data["not_standing"] = not_standing
                    continue
                post_id = candidacy["post_id"]
                if election_id.startswith("parl."):
                    post_id = mapit_id_to_gss.get(post_id, post_id)
                key = "--".join([election_id, post_id])
                post_id = post_slug_fixes.get(key, post_id)

                ballot = get_ballot_from_cache(election_id, post_id)

                new_candidacy = {}
                new_candidacy["party"] = get_party_from_version(
                    initial_election_id, version
                )
                if "elected" in candidacy:
                    new_candidacy["elected"] = candidacy["elected"]
                if "party_list_position" in candidacy:
                    new_candidacy["party_list_position"] = candidacy[
                        "party_list_position"
                    ]
                data["candidacies"][ballot.ballot_paper_id] = new_candidacy
            data.pop("standing_in", None)
            data.pop("party_memberships", None)
        person.versions = json.dumps(versions)
        person.save()


class Migration(migrations.Migration):
    dependencies = [
        ("people", "0018_gender_guess"),
        ("popolo", "0035_attach_memberships_to_posts"),
    ]

    operations = [
        migrations.RunPython(
            move_to_ballot_in_version_history, migrations.RunPython.noop
        )
    ]
