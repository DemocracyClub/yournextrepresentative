# Generated by Django 3.2.10 on 2021-12-14 17:21

from django.conf import settings
import django.contrib.postgres.indexes
import django.contrib.postgres.search
from django.db import migrations, models
import django.db.models.deletion
import django_extensions.db.fields
import people.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("elections", "0001_initial"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="Person",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created",
                    django_extensions.db.fields.CreationDateTimeField(
                        auto_now_add=True, verbose_name="created"
                    ),
                ),
                (
                    "modified",
                    django_extensions.db.fields.ModificationDateTimeField(
                        auto_now=True, verbose_name="modified"
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="A person's preferred full name",
                        max_length=512,
                        verbose_name="name",
                    ),
                ),
                (
                    "family_name",
                    models.CharField(
                        blank=True,
                        help_text="One or more family names",
                        max_length=128,
                        verbose_name="family name",
                    ),
                ),
                (
                    "given_name",
                    models.CharField(
                        blank=True,
                        help_text="One or more primary given names",
                        max_length=128,
                        verbose_name="given name",
                    ),
                ),
                (
                    "additional_name",
                    models.CharField(
                        blank=True,
                        help_text="One or more secondary given names",
                        max_length=128,
                        verbose_name="additional name",
                    ),
                ),
                (
                    "honorific_prefix",
                    models.CharField(
                        blank=True,
                        help_text="One or more honorifics preceding a person's name",
                        max_length=128,
                        verbose_name="honorific prefix",
                    ),
                ),
                (
                    "honorific_suffix",
                    models.CharField(
                        blank=True,
                        help_text="One or more honorifics following a person's name",
                        max_length=128,
                        verbose_name="honorific suffix",
                    ),
                ),
                (
                    "patronymic_name",
                    models.CharField(
                        blank=True,
                        help_text="One or more patronymic names",
                        max_length=128,
                        verbose_name="patronymic name",
                    ),
                ),
                (
                    "sort_name",
                    models.CharField(
                        blank=True,
                        help_text="A name to use in an lexicographically ordered list",
                        max_length=128,
                        verbose_name="sort name",
                    ),
                ),
                (
                    "gender",
                    models.CharField(
                        blank=True,
                        help_text="A gender",
                        max_length=128,
                        verbose_name="gender",
                    ),
                ),
                (
                    "birth_date",
                    models.CharField(
                        blank=True,
                        help_text="A year of birth",
                        max_length=4,
                        verbose_name="birth date",
                    ),
                ),
                (
                    "death_date",
                    models.CharField(
                        blank=True,
                        help_text="A date of death",
                        max_length=20,
                        verbose_name="death date",
                    ),
                ),
                (
                    "summary",
                    models.CharField(
                        blank=True,
                        help_text="A one-line account of a person's life",
                        max_length=1024,
                        verbose_name="summary",
                    ),
                ),
                (
                    "biography",
                    models.TextField(
                        blank=True,
                        help_text="An extended account of a person's life",
                        verbose_name="biography",
                    ),
                ),
                (
                    "national_identity",
                    models.CharField(
                        blank=True,
                        help_text="A national identity",
                        max_length=128,
                        null=True,
                        verbose_name="national identity",
                    ),
                ),
                ("versions", models.JSONField(default=list)),
                (
                    "favourite_biscuit",
                    models.CharField(
                        max_length=255,
                        null=True,
                        verbose_name="Favourite biscuit üç™",
                    ),
                ),
                (
                    "edit_limitations",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("NEEDS_REVIEW", "Needs review"),
                            ("EDITS_PREVENTED", "Edits prevented"),
                        ],
                        max_length=100,
                    ),
                ),
                (
                    "name_search_vector",
                    django.contrib.postgres.search.SearchVectorField(null=True),
                ),
                (
                    "not_standing",
                    models.ManyToManyField(
                        related_name="persons_not_standing_tmp",
                        to="elections.Election",
                    ),
                ),
            ],
            options={"verbose_name_plural": "People"},
        ),
        migrations.CreateModel(
            name="PersonNameSynonym",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "term",
                    django.contrib.postgres.search.SearchQueryField(
                        help_text="The term entered"
                    ),
                ),
                (
                    "synonym",
                    django.contrib.postgres.search.SearchQueryField(
                        help_text="An alternative word for the term"
                    ),
                ),
            ],
            options={"ordering": ("-term",)},
        ),
        migrations.CreateModel(
            name="PersonImage",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "image",
                    models.ImageField(
                        max_length=512,
                        upload_to=people.models.person_image_path,
                    ),
                ),
                ("source", models.CharField(max_length=400)),
                (
                    "copyright",
                    models.CharField(
                        blank=True, default="other", max_length=64
                    ),
                ),
                ("user_notes", models.TextField(blank=True)),
                ("md5sum", models.CharField(blank=True, max_length=32)),
                (
                    "user_copyright",
                    models.CharField(blank=True, max_length=128),
                ),
                ("notes", models.TextField(blank=True)),
                ("is_primary", models.BooleanField(default=False)),
                (
                    "person",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="images",
                        to="people.person",
                    ),
                ),
                (
                    "uploading_user",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="GenderGuess",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("gender", models.CharField(max_length=1)),
                (
                    "person",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="gender_guess",
                        to="people.person",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="PersonIdentifier",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created",
                    django_extensions.db.fields.CreationDateTimeField(
                        auto_now_add=True, verbose_name="created"
                    ),
                ),
                (
                    "modified",
                    django_extensions.db.fields.ModificationDateTimeField(
                        auto_now=True, verbose_name="modified"
                    ),
                ),
                (
                    "value",
                    models.CharField(
                        help_text="An identifier e.g a URL or username provided by a 3rd party",
                        max_length=800,
                    ),
                ),
                (
                    "internal_identifier",
                    models.CharField(
                        help_text="An optional internal identifier from the 3rd party",
                        max_length=800,
                        null=True,
                    ),
                ),
                (
                    "value_type",
                    models.CharField(
                        help_text="A label for the type of value e.g. 'Twitter', 'Person blog'",
                        max_length=100,
                    ),
                ),
                (
                    "extra_data",
                    models.JSONField(
                        default=dict,
                        help_text="For storing any additional data against this field.\n                     Used by bots, not humans.",
                    ),
                ),
                (
                    "person",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="tmp_person_identifiers",
                        to="people.person",
                    ),
                ),
            ],
            options={
                "ordering": ("value_type", "-modified"),
                "unique_together": {
                    ("person", "internal_identifier", "value_type"),
                    ("person", "value"),
                    ("person", "value_type"),
                },
            },
        ),
        migrations.AddIndex(
            model_name="person",
            index=django.contrib.postgres.indexes.GistIndex(
                fields=["name_search_vector"], name="name_vector_search_index"
            ),
        ),
    ]
