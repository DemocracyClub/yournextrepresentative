# Generated by Django 3.2.10 on 2021-12-14 17:21

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import django_extensions.db.fields
import model_utils.fields
import popolo.behaviors.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("contenttypes", "0002_remove_content_type_name"),
        ("parties", "0001_initial"),
        ("people", "0001_initial"),
        ("candidates", "0001_initial"),
        ("elections", "0001_initial"),
    ]

    operations = [
        migrations.CreateModel(
            name="Language",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "dbpedia_resource",
                    models.CharField(
                        help_text="DbPedia URI of the resource",
                        max_length=255,
                        unique=True,
                    ),
                ),
                ("iso639_1_code", models.CharField(max_length=2)),
                (
                    "name",
                    models.CharField(
                        help_text="English name of the language", max_length=128
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Organization",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created",
                    model_utils.fields.AutoCreatedField(
                        default=django.utils.timezone.now,
                        editable=False,
                        verbose_name="created",
                    ),
                ),
                (
                    "modified",
                    model_utils.fields.AutoLastModifiedField(
                        default=django.utils.timezone.now,
                        editable=False,
                        verbose_name="modified",
                    ),
                ),
                (
                    "start_date",
                    models.CharField(
                        blank=True,
                        help_text="The date when the validity of the item starts",
                        max_length=10,
                        null=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="Date has wrong format",
                                regex="^[0-9]{4}(-[0-9]{2}){0,2}$",
                            ),
                            popolo.behaviors.models.validate_partial_date,
                        ],
                        verbose_name="start date",
                    ),
                ),
                (
                    "end_date",
                    models.CharField(
                        blank=True,
                        help_text="The date when the validity of the item ends",
                        max_length=10,
                        null=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="Date has wrong format",
                                regex="^[0-9]{4}(-[0-9]{2}){0,2}$",
                            ),
                            popolo.behaviors.models.validate_partial_date,
                        ],
                        verbose_name="end date",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="A primary name, e.g. a legally recognized name",
                        max_length=512,
                        verbose_name="name",
                    ),
                ),
                (
                    "summary",
                    models.CharField(
                        blank=True,
                        help_text="A one-line description of an organization",
                        max_length=1024,
                        verbose_name="summary",
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True,
                        help_text="An extended description of an organization",
                        verbose_name="biography",
                    ),
                ),
                (
                    "classification",
                    models.CharField(
                        blank=True,
                        help_text="An organization category, e.g. committee",
                        max_length=512,
                        verbose_name="classification",
                    ),
                ),
                (
                    "founding_date",
                    models.CharField(
                        blank=True,
                        help_text="A date of founding",
                        max_length=10,
                        null=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                code="invalid_founding_date",
                                message="founding date must follow the given pattern: ^[0-9]{4}(-[0-9]{2}){0,2}$",
                                regex="^[0-9]{4}(-[0-9]{2}){0,2}$",
                            )
                        ],
                        verbose_name="founding date",
                    ),
                ),
                (
                    "dissolution_date",
                    models.CharField(
                        blank=True,
                        help_text="A date of dissolution",
                        max_length=10,
                        null=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                code="invalid_dissolution_date",
                                message="dissolution date must follow the given pattern: ^[0-9]{4}(-[0-9]{2}){0,2}$",
                                regex="^[0-9]{4}(-[0-9]{2}){0,2}$",
                            )
                        ],
                        verbose_name="dissolution date",
                    ),
                ),
                (
                    "image",
                    models.URLField(
                        blank=True,
                        help_text="A URL of an image, to identify the organization visually",
                        null=True,
                        verbose_name="image",
                    ),
                ),
                (
                    "slug",
                    models.CharField(blank=True, max_length=256, unique=True),
                ),
                ("register", models.CharField(blank=True, max_length=512)),
                (
                    "parent",
                    models.ForeignKey(
                        blank=True,
                        help_text="The organization that contains this organization",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="children",
                        to="popolo.organization",
                    ),
                ),
            ],
            options={"abstract": False},
        ),
        migrations.CreateModel(
            name="Post",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created",
                    django_extensions.db.fields.CreationDateTimeField(
                        auto_now_add=True, verbose_name="created"
                    ),
                ),
                (
                    "modified",
                    django_extensions.db.fields.ModificationDateTimeField(
                        auto_now=True, db_index=True, verbose_name="modified"
                    ),
                ),
                (
                    "ee_modified",
                    models.DateTimeField(
                        blank=True,
                        help_text="Stores the modified timestamp from EE",
                        null=True,
                    ),
                ),
                (
                    "start_date",
                    models.CharField(
                        blank=True,
                        help_text="The date when the validity of the item starts",
                        max_length=10,
                        null=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="Date has wrong format",
                                regex="^[0-9]{4}(-[0-9]{2}){0,2}$",
                            ),
                            popolo.behaviors.models.validate_partial_date,
                        ],
                        verbose_name="start date",
                    ),
                ),
                (
                    "end_date",
                    models.CharField(
                        blank=True,
                        help_text="The date when the validity of the item ends",
                        max_length=10,
                        null=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="Date has wrong format",
                                regex="^[0-9]{4}(-[0-9]{2}){0,2}$",
                            ),
                            popolo.behaviors.models.validate_partial_date,
                        ],
                        verbose_name="end date",
                    ),
                ),
                (
                    "identifier",
                    models.CharField(
                        help_text="\n        The identifier used in EveryElection for this division. This might\n        change over time, as some divisions don't have official IDs at the\n        point we create them.\n        ",
                        max_length=100,
                        null=True,
                    ),
                ),
                (
                    "label",
                    models.CharField(
                        blank=True,
                        help_text="A label describing the post",
                        max_length=512,
                        verbose_name="label",
                    ),
                ),
                (
                    "other_label",
                    models.CharField(
                        blank=True,
                        help_text="An alternate label, such as an abbreviation",
                        max_length=512,
                        null=True,
                        verbose_name="other label",
                    ),
                ),
                (
                    "role",
                    models.CharField(
                        blank=True,
                        help_text="The function that the holder of the post fulfills",
                        max_length=512,
                        verbose_name="role",
                    ),
                ),
                ("slug", models.CharField(blank=True, max_length=256)),
                ("group", models.CharField(blank=True, max_length=1024)),
                (
                    "territory_code",
                    models.CharField(
                        blank=True,
                        help_text="\n        The territory within Great Britain that this post is in.\n        One of SCT, WLS, ENG, NIR\n        ",
                        max_length=10,
                    ),
                ),
                (
                    "elections",
                    models.ManyToManyField(
                        related_name="posts",
                        through="candidates.Ballot",
                        to="elections.Election",
                    ),
                ),
                (
                    "organization",
                    models.ForeignKey(
                        help_text="The organization in which the post is held",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="posts",
                        to="popolo.organization",
                    ),
                ),
                (
                    "party_set",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="candidates.partyset",
                    ),
                ),
            ],
            options={
                "unique_together": {("slug", "organization", "start_date")}
            },
        ),
        migrations.CreateModel(
            name="Source",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "object_id",
                    models.PositiveIntegerField(blank=True, null=True),
                ),
                ("url", models.URLField(help_text="A URL", verbose_name="url")),
                (
                    "note",
                    models.CharField(
                        blank=True,
                        help_text="A note, e.g. 'Parliament website'",
                        max_length=512,
                        verbose_name="note",
                    ),
                ),
                (
                    "content_type",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="contenttypes.contenttype",
                    ),
                ),
            ],
            options={"abstract": False},
        ),
        migrations.CreateModel(
            name="PostIdentifier",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created",
                    model_utils.fields.AutoCreatedField(
                        default=django.utils.timezone.now,
                        editable=False,
                        verbose_name="created",
                    ),
                ),
                (
                    "modified",
                    model_utils.fields.AutoLastModifiedField(
                        default=django.utils.timezone.now,
                        editable=False,
                        verbose_name="modified",
                    ),
                ),
                ("identifier", models.CharField(max_length=256)),
                ("label", models.CharField(blank=True, max_length=255)),
                (
                    "post",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="popolo.post",
                    ),
                ),
            ],
            options={"abstract": False},
        ),
        migrations.CreateModel(
            name="Identifier",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "object_id",
                    models.PositiveIntegerField(blank=True, null=True),
                ),
                (
                    "identifier",
                    models.CharField(
                        help_text="An issued identifier, e.g. a DUNS number",
                        max_length=512,
                        verbose_name="identifier",
                    ),
                ),
                (
                    "scheme",
                    models.CharField(
                        blank=True,
                        help_text="An identifier scheme, e.g. DUNS",
                        max_length=128,
                        verbose_name="scheme",
                    ),
                ),
                (
                    "content_type",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="contenttypes.contenttype",
                    ),
                ),
            ],
            options={"abstract": False},
        ),
        migrations.CreateModel(
            name="ContactDetail",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created",
                    model_utils.fields.AutoCreatedField(
                        default=django.utils.timezone.now,
                        editable=False,
                        verbose_name="created",
                    ),
                ),
                (
                    "modified",
                    model_utils.fields.AutoLastModifiedField(
                        default=django.utils.timezone.now,
                        editable=False,
                        verbose_name="modified",
                    ),
                ),
                (
                    "object_id",
                    models.PositiveIntegerField(blank=True, null=True),
                ),
                (
                    "start_date",
                    models.CharField(
                        blank=True,
                        help_text="The date when the validity of the item starts",
                        max_length=10,
                        null=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="Date has wrong format",
                                regex="^[0-9]{4}(-[0-9]{2}){0,2}$",
                            ),
                            popolo.behaviors.models.validate_partial_date,
                        ],
                        verbose_name="start date",
                    ),
                ),
                (
                    "end_date",
                    models.CharField(
                        blank=True,
                        help_text="The date when the validity of the item ends",
                        max_length=10,
                        null=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="Date has wrong format",
                                regex="^[0-9]{4}(-[0-9]{2}){0,2}$",
                            ),
                            popolo.behaviors.models.validate_partial_date,
                        ],
                        verbose_name="end date",
                    ),
                ),
                (
                    "label",
                    models.CharField(
                        blank=True,
                        help_text="A human-readable label for the contact detail",
                        max_length=512,
                        verbose_name="label",
                    ),
                ),
                (
                    "contact_type",
                    models.CharField(
                        choices=[
                            ("ADDRESS", "Address"),
                            ("EMAIL", "Email"),
                            ("URL", "Url"),
                            ("MAIL", "Snail mail"),
                            ("TWITTER", "Twitter"),
                            ("FACEBOOK", "Facebook"),
                            ("PHONE", "Telephone"),
                            ("MOBILE", "Mobile"),
                            ("TEXT", "Text"),
                            ("VOICE", "Voice"),
                            ("FAX", "Fax"),
                            ("CELL", "Cell"),
                            ("VIDEO", "Video"),
                            ("PAGER", "Pager"),
                            ("TEXTPHONE", "Textphone"),
                        ],
                        help_text="A type of medium, e.g. 'fax' or 'email'",
                        max_length=12,
                        verbose_name="type",
                    ),
                ),
                (
                    "value",
                    models.CharField(
                        help_text="A value, e.g. a phone number or email address",
                        max_length=512,
                        verbose_name="value",
                    ),
                ),
                (
                    "note",
                    models.CharField(
                        blank=True,
                        help_text="A note, e.g. for grouping contact details by physical location",
                        max_length=512,
                        verbose_name="note",
                    ),
                ),
                (
                    "content_type",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="contenttypes.contenttype",
                    ),
                ),
            ],
            options={"abstract": False},
        ),
        migrations.CreateModel(
            name="OtherName",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "object_id",
                    models.PositiveIntegerField(blank=True, null=True),
                ),
                (
                    "start_date",
                    models.CharField(
                        blank=True,
                        help_text="The date when the validity of the item starts",
                        max_length=10,
                        null=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="Date has wrong format",
                                regex="^[0-9]{4}(-[0-9]{2}){0,2}$",
                            ),
                            popolo.behaviors.models.validate_partial_date,
                        ],
                        verbose_name="start date",
                    ),
                ),
                (
                    "end_date",
                    models.CharField(
                        blank=True,
                        help_text="The date when the validity of the item ends",
                        max_length=10,
                        null=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="Date has wrong format",
                                regex="^[0-9]{4}(-[0-9]{2}){0,2}$",
                            ),
                            popolo.behaviors.models.validate_partial_date,
                        ],
                        verbose_name="end date",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="An alternate or former name",
                        max_length=512,
                        verbose_name="name",
                    ),
                ),
                (
                    "note",
                    models.CharField(
                        blank=True,
                        help_text="A note, e.g. 'Birth name'",
                        max_length=1024,
                        verbose_name="note",
                    ),
                ),
                (
                    "content_type",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="contenttypes.contenttype",
                    ),
                ),
            ],
            options={
                "ordering": ("name",),
                "unique_together": {("name", "object_id", "content_type")},
            },
        ),
        migrations.CreateModel(
            name="Membership",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created",
                    model_utils.fields.AutoCreatedField(
                        default=django.utils.timezone.now,
                        editable=False,
                        verbose_name="created",
                    ),
                ),
                (
                    "start_date",
                    models.CharField(
                        blank=True,
                        help_text="The date when the validity of the item starts",
                        max_length=10,
                        null=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="Date has wrong format",
                                regex="^[0-9]{4}(-[0-9]{2}){0,2}$",
                            ),
                            popolo.behaviors.models.validate_partial_date,
                        ],
                        verbose_name="start date",
                    ),
                ),
                (
                    "end_date",
                    models.CharField(
                        blank=True,
                        help_text="The date when the validity of the item ends",
                        max_length=10,
                        null=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="Date has wrong format",
                                regex="^[0-9]{4}(-[0-9]{2}){0,2}$",
                            ),
                            popolo.behaviors.models.validate_partial_date,
                        ],
                        verbose_name="end date",
                    ),
                ),
                (
                    "modified",
                    django_extensions.db.fields.ModificationDateTimeField(
                        auto_now=True, db_index=True, verbose_name="modified"
                    ),
                ),
                (
                    "label",
                    models.CharField(
                        blank=True,
                        help_text="A label describing the membership",
                        max_length=512,
                        verbose_name="label",
                    ),
                ),
                (
                    "role",
                    models.CharField(
                        blank=True,
                        help_text="The role that the person fulfills in the organization",
                        max_length=512,
                        verbose_name="role",
                    ),
                ),
                (
                    "party_name",
                    models.CharField(
                        help_text="The name of the associated party at the time of this membership. This is useful if the associated party subsequently changed name",
                        max_length=255,
                    ),
                ),
                (
                    "party_description_text",
                    models.CharField(
                        blank=True,
                        help_text="The text of the party description at the time of this membership. This is useful if the associated party description subsequently changed",
                        max_length=800,
                    ),
                ),
                ("elected", models.BooleanField(null=True)),
                (
                    "party_list_position",
                    models.PositiveSmallIntegerField(null=True),
                ),
                (
                    "ballot",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="candidates.ballot",
                    ),
                ),
                (
                    "party",
                    models.ForeignKey(
                        help_text="The political party for this membership",
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        to="parties.party",
                    ),
                ),
                (
                    "party_description",
                    models.ForeignKey(
                        blank=True,
                        help_text="The party description for this membership",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="parties.partydescription",
                    ),
                ),
                (
                    "person",
                    models.ForeignKey(
                        help_text="The person who is a party to the relationship",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="memberships",
                        to="people.person",
                    ),
                ),
                (
                    "post",
                    models.ForeignKey(
                        blank=True,
                        help_text="The post held by the person in the organization through this membership",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="memberships",
                        to="popolo.post",
                    ),
                ),
            ],
            options={
                "ordering": (
                    "party__name",
                    "party_list_position",
                    "person__name",
                ),
                "unique_together": {("person", "ballot")},
            },
        ),
    ]
