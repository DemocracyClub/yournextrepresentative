# Generated by Django 3.2.10 on 2021-12-15 12:20

import os

from django.conf import settings
import django.contrib.postgres.fields.jsonb
from django.db import migrations, models
import django.db.migrations.operations.special
import django.db.models.deletion
import django.utils.timezone
import django_extensions.db.fields
from django.contrib.auth.management import create_permissions

from candidates.models import (
    TRUSTED_TO_MERGE_GROUP_NAME,
    TRUSTED_TO_LOCK_GROUP_NAME,
    RESULT_RECORDERS_GROUP_NAME,
)

TRUSTED_TO_RENAME_GROUP_NAME = "Trusted To Rename"


# Functions from the following migrations need manual copying.
# Move them and any dependencies into this file, then update the
# RunPython operations to refer to the local versions:
# candidates.migrations.0003_create_user_terms_agreements
def create_user_terms_agreements(apps, schema_editor):
    User = apps.get_model("auth", "User")
    UserTermsAgreement = apps.get_model("candidates", "UserTermsAgreement")
    for u in User.objects.all():
        UserTermsAgreement.objects.get_or_create(user=u)


# candidates.migrations.0004_add_trusted_to_merge_group
# candidates.migrations.0005_add_trusted_to_lock_group
# candidates.migrations.0006_auto_add_trusted_to_rename_group
# candidates.migrations.0007_add_result_recorders_group
# candidates.migrations.0011_migrate_loggedaction_person
def popit_to_db(apps, schema_editor):
    Person = apps.get_model("popolo", "person")
    LoggedAction = apps.get_model("candidates", "loggedaction")
    for la in LoggedAction.objects.all():
        if la.popit_person_id:
            try:
                la.person = Person.objects.get(pk=la.popit_person_id)
            except Person.DoesNotExist:
                # LoggedAction objects may refer to someone who has
                # since been deleted from PopIt.
                la.person = None
        else:
            la.person = None
        la.save()


def db_to_popit(apps, schema_editor):
    LoggedAction = apps.get_model("candidates", "loggedaction")
    for la in LoggedAction.objects.all():
        if la.person:
            la.popit_person_id = la.person.id
        else:
            la.popit_person_id = ""
        la.save()


# candidates.migrations.0020_cr_add_reelection_field
# candidates.migrations.0022_create_standard_simple_fields
def create_simple_fields(apps, schema_editor):
    SimpleField = apps.get_model("candidates", "SimplePopoloField")
    db_alias = schema_editor.connection.alias

    SimpleField.objects.using(db_alias).bulk_create(
        [
            SimpleField(
                name="honorific_prefix",
                label="Title / pre-nominal honorific (e.g. Dr, Sir, etc.)",
                required=False,
                info_type_key="text",
                order=1,
            ),
            SimpleField(
                name="name",
                label="Full name",
                required=True,
                info_type_key="text",
                order=2,
            ),
            SimpleField(
                name="honorific_suffix",
                label="Post-nominal letters (e.g. CBE, DSO, etc.)",
                required=False,
                info_type_key="text",
                order=3,
            ),
            SimpleField(
                name="email",
                label="Email",
                required=False,
                info_type_key="email",
                order=4,
            ),
            SimpleField(
                name="gender",
                label="Gender (e.g. “male”, “female”)",
                required=False,
                info_type_key="text",
                order=5,
            ),
            SimpleField(
                name="birth_date",
                label="Date of birth (a four digit year or a full date)",
                required=False,
                info_type_key="text",
                order=6,
            ),
        ]
    )


# candidates.migrations.0024_port_existing_post_to_election_m2m_data
def old_post_election_m2m_to_new(apps, schema_editor):
    PostExtraElection = apps.get_model("candidates", "PostExtraElection")
    PostExtra = apps.get_model("candidates", "PostExtra")
    for post in PostExtra.objects.all():
        for election in post.elections.all():
            PostExtraElection.objects.get_or_create(
                postextra=post, election=election
            )


def new_post_election_m2m_to_old(apps, schema_editor):
    PostExtra = apps.get_model("candidates", "PostExtra")

    for post in PostExtra.objects.all():
        for election in post.new_elections.all():
            post.elections.add(election)


# candidates.migrations.0027_create_standard_complex_fields


def remove_standard_fields(apps, schema_editor):
    ComplexField = apps.get_model("candidates", "ComplexPopoloField")
    db_alias = schema_editor.connection.alias
    ComplexField.objects.using(db_alias).all().delete()


def create_complex_fields(apps, schema_editor):
    ComplexField = apps.get_model("candidates", "ComplexPopoloField")
    db_alias = schema_editor.connection.alias

    ComplexField.objects.using(db_alias).bulk_create(
        [
            ComplexField(
                name="twitter_username",
                label="Twitter username (e.g. democlub)",
                field_type="text",
                popolo_array="contact_details",
                info_type_key="contact_type",
                info_type="twitter",
                info_value_key="value",
                order=1,
            ),
            ComplexField(
                name="facebook_personal_url",
                label="Facebook profile URL",
                field_type="url",
                popolo_array="links",
                info_type_key="note",
                info_type="facebook personal",
                info_value_key="url",
                order=2,
            ),
            ComplexField(
                name="facebook_page_url",
                label="Facebook page (e.g. for their campaign)",
                field_type="url",
                popolo_array="links",
                info_type_key="note",
                info_type="facebook page",
                info_value_key="url",
                order=3,
            ),
            ComplexField(
                name="homepage_url",
                label="Homepage URL",
                field_type="url",
                popolo_array="links",
                info_type_key="note",
                info_type="homepage",
                info_value_key="url",
                order=4,
            ),
            ComplexField(
                name="wikipedia_url",
                label="Wikipedia URL",
                field_type="url",
                popolo_array="links",
                info_type_key="note",
                info_type="wikipedia",
                info_value_key="url",
                order=5,
            ),
            ComplexField(
                name="linkedin_url",
                label="LinkedIn URL",
                field_type="url",
                popolo_array="links",
                info_type_key="note",
                info_type="linkedin",
                info_value_key="url",
                order=6,
            ),
            ComplexField(
                name="party_ppc_page_url",
                label="The party's candidate page for this person",
                field_type="url",
                popolo_array="links",
                info_type_key="note",
                info_type="party candidate page",
                old_info_type="party PPC page",
                info_value_key="url",
                order=7,
            ),
        ]
    )


# candidates.migrations.0032_migrate_org_slugs


def add_missing_classifications(apps):
    Organization = apps.get_model("popolo", "Organization")

    for org in Organization.objects.filter(classification=""):
        if org.name.endswith(" Police") or org.name.endswith(" Constabulary"):
            org.classification = "police_area"
            org.save()

    mapping = {
        "London Assembly": "gla",
        "Greater London Authority": "gla",
        "National Assembly for Wales": "naw",
        "Northern Ireland Assembly": "nia",
        "Scottish Parliament": "sp",
    }
    for name, classification in mapping.items():
        Organization.objects.filter(name=name).update(
            classification=classification
        )

    for org in Organization.objects.filter(classification=""):
        org.classification = "local-authority"
        org.save()


def add_classification_to_slugs(apps, schema_editor):
    if settings.ELECTION_APP != "uk":
        return
    add_missing_classifications(apps)
    OrganizationExtra = apps.get_model("candidates", "OrganizationExtra")

    for ox in OrganizationExtra.objects.exclude(base__classification="Party"):
        if not ox.slug.startswith(ox.base.classification):
            ox.slug = ":".join([ox.base.classification, ox.slug])
            ox.save()


def remove_classification_from_slugs(apps, schema_editor):
    if settings.ELECTION_APP != "uk":
        return
    OrganizationExtra = apps.get_model("candidates", "OrganizationExtra")

    for ox in OrganizationExtra.objects.all():
        if ox.slug.startswith(ox.base.classification) and ":" in ox.slug:
            ox.slug = ox.slug.split(":")[1]
            if not OrganizationExtra.objects.filter(slug=ox.slug).exists():
                ox.save()


# candidates.migrations.0034_candidates_locked_data


def move_candidates_locked_to_postextraelection(apps, schema_editor):
    PostExtra = apps.get_model("candidates", "PostExtra")
    PostExtraElection = apps.get_model("candidates", "PostExtraElection")

    locks = PostExtra.objects.filter(candidates_locked=True)
    for lock in locks:
        for election in lock.elections.all():
            new_lock = PostExtraElection.objects.get(
                postextra=lock, election=election
            )
            new_lock.candidates_locked = True
            new_lock.save()


def move_candidates_locked_to_postextra(apps, schema_editor):
    """
    Because this locks at a post level it means the reverse migration
    is potentially lossy. In cases where a post has been in more than one
    election and not all of them are locked that data will be lost.
    However, it seemed better to be permissive in locking as I think it's
    easier to spot "Hey, why can't I edit this" that "Hey, I should not be
    able to edit this". Hopefully. Regardless, if you want to do this
    you need to set an env variable `ALLOW_LOSSY_REVERSE_MIGRATIONS=1`
    """
    if os.environ.get("ALLOW_LOSSY_REVERSE_MIGRATIONS") != "1":
        raise Exception(
            "Cannot reverse 0034_candidates_locked_data migration as it will \
            lose data. See the migration file for more details."
        )
    PostExtraElection = apps.get_model("candidates", "PostExtraElection")

    locks = PostExtraElection.objects.filter(candidates_locked=True)
    for lock in locks:
        pe = lock.postextra
        pe.candidates_locked = True
        pe.save()


# candidates.migrations.0039_create_ballot_paper_ids_and_set_unique


def create_tmp_ballot_paper_id_from_pee(apps, schema_editor):
    PostExtraElection = apps.get_model("candidates", "PostExtraElection")
    for pee in PostExtraElection.objects.all():
        pee.ballot_paper_id = "tmp_{}.{}".format(
            pee.election.slug, pee.postextra.slug
        )
        pee.save()


def do_nothing(apps, schema_editor):
    pass


# candidates.migrations.0040_membershipextra_post_election


def populate_post_election_from_membership(apps, schema_editor):
    PostExtraElection = apps.get_model("candidates", "PostExtraElection")
    MembershipExtra = apps.get_model("candidates", "MembershipExtra")
    qs = MembershipExtra.objects.filter(post_election=None).select_related(
        "base__post__extra"
    )
    for me in qs:
        # Get the PostExtraElection
        pee = PostExtraElection.objects.get(
            postextra=me.base.post.extra, election=me.election
        )
        me.post_election = pee
        me.save()


# candidates.migrations.0048_move_pee_postextra_to_post
def add_extra_fields_to_base(apps, schema_editor):
    PostExtraElection = apps.get_model("candidates", "PostExtraElection")

    for pee in PostExtraElection.objects.all().select_related(
        "postextra__base"
    ):
        pee.post = pee.postextra.base
        pee.save()


# candidates.migrations.0056_tmp_ids_to_ballot_id


def move_tmp_ids_to_actual_ids(apps, schema_editor):
    PostExtraElection = apps.get_model("candidates", "PostExtraElection")

    pees_with_tmp_ids = PostExtraElection.objects.filter(
        ballot_paper_id__startswith="tmp_"
    )
    if not pees_with_tmp_ids.exists():
        # Return quickly if no tmp ids exist, to save iterating over the file
        # needlessly
        return

    data_file = open(
        "ynr/apps/candidates/migrations/0056_tmp_ids_to_ballot_id.csv"
    )
    for line in data_file:
        tmp_id, new_id = line.split(",")
        PostExtraElection.objects.filter(ballot_paper_id=tmp_id).update(
            ballot_paper_id=new_id.strip()
        )


# candidates.migrations.0063_populate_loggedaction_edit_types
def populate_edit_types(apps, schema_editor):
    LoggedAction = apps.get_model("candidates", "LoggedAction")
    KNOWN_BOT_USERS = ["CandidateBot", "ResultsBot", "TwitterBot"]

    LoggedAction.objects.filter(user__username__in=KNOWN_BOT_USERS).update(
        edit_type="BOT"
    )


# candidates.migrations.0071_add_created_data
# candidates.migrations.0074_auto_20211006_1027
# candidates.migrations.0078_populate_person_pk_on_loggedaction
def add_trusted_to_merge_group(apps, schema_editor, create_if_missing=True):
    group_name, permission_codenames = TRUSTED_TO_MERGE_GROUP_NAME, []
    Permission = apps.get_model("auth", "Permission")
    Group = apps.get_model("auth", "Group")
    try:
        permissions = Permission.objects.filter(
            codename__in=permission_codenames
        )
    except Permission.DoesNotExist:
        if create_if_missing:
            # This is a way of making sure the permissions exist taken from:
            # https://code.djangoproject.com/ticket/23422#comment:6
            assert not getattr(apps, "models_module", None)
            apps.models_module = True
            create_permissions(apps, verbosity=0)
            apps.models_module = None
            return add_trusted_to_merge_group(
                apps, schema_editor, create_if_missing=False
            )
        else:
            raise
    new_group = Group.objects.create(name=group_name)
    for permission in permissions:
        new_group.permissions.add(permission)


def add_trusted_to_lock_group(apps, schema_editor, create_if_missing=True):
    group_name, permission_codenames = TRUSTED_TO_LOCK_GROUP_NAME, []
    Permission = apps.get_model("auth", "Permission")
    Group = apps.get_model("auth", "Group")
    try:
        permissions = Permission.objects.filter(
            codename__in=permission_codenames
        )
    except Permission.DoesNotExist:
        if create_if_missing:
            # This is a way of making sure the permissions exist taken from:
            # https://code.djangoproject.com/ticket/23422#comment:6
            assert not getattr(apps, "models_module", None)
            apps.models_module = True
            create_permissions(apps, verbosity=0)
            apps.models_module = None
            return add_trusted_to_lock_group(
                apps, schema_editor, create_if_missing=False
            )
        else:
            raise
    new_group = Group.objects.create(name=group_name)
    for permission in permissions:
        new_group.permissions.add(permission)


def remove_trusted_to_lock_group(apps, schema_editor):

    Group = apps.get_model("auth", "Group")
    Group.objects.get(name=TRUSTED_TO_LOCK_GROUP_NAME).delete()


def remove_trusted_to_merge_group(apps, schema_editor):

    Group = apps.get_model("auth", "Group")
    Group.objects.get(name=TRUSTED_TO_MERGE_GROUP_NAME).delete()


def add_trusted_to_rename_group(apps, schema_editor, create_if_missing=True):
    group_name, permission_codenames = TRUSTED_TO_RENAME_GROUP_NAME, []
    Permission = apps.get_model("auth", "Permission")
    Group = apps.get_model("auth", "Group")
    try:
        permissions = Permission.objects.filter(
            codename__in=permission_codenames
        )
    except Permission.DoesNotExist:
        if create_if_missing:
            # This is a way of making sure the permissions exist taken from:
            # https://code.djangoproject.com/ticket/23422#comment:6
            assert not getattr(apps, "models_module", None)
            apps.models_module = True
            create_permissions(apps, verbosity=0)
            apps.models_module = None
            return add_trusted_to_rename_group(
                apps, schema_editor, create_if_missing=False
            )
        else:
            raise
    new_group = Group.objects.create(name=group_name)
    for permission in permissions:
        new_group.permissions.add(permission)


def remove_trusted_to_rename_group(apps, schema_editor):

    Group = apps.get_model("auth", "Group")
    Group.objects.get(name=TRUSTED_TO_RENAME_GROUP_NAME).delete()


def add_result_recorders_group(apps, schema_editor, create_if_missing=True):
    group_name, permission_codenames = RESULT_RECORDERS_GROUP_NAME, []
    Permission = apps.get_model("auth", "Permission")
    Group = apps.get_model("auth", "Group")
    try:
        permissions = Permission.objects.filter(
            codename__in=permission_codenames
        )
    except Permission.DoesNotExist:
        if create_if_missing:
            # This is a way of making sure the permissions exist taken from:
            # https://code.djangoproject.com/ticket/23422#comment:6
            assert not getattr(apps, "models_module", None)
            apps.models_module = True
            create_permissions(apps, verbosity=0)
            apps.models_module = None
            return add_result_recorders_group(
                apps, schema_editor, create_if_missing=False
            )
        else:
            raise
    new_group = Group.objects.create(name=group_name)
    for permission in permissions:
        new_group.permissions.add(permission)


def remove_result_recorders_group(apps, schema_editor):

    Group = apps.get_model("auth", "Group")
    Group.objects.get(name=RESULT_RECORDERS_GROUP_NAME).delete()


class Migration(migrations.Migration):

    replaces = [
        ("candidates", "0001_initial"),
        ("candidates", "0002_usertermsagreement"),
        ("candidates", "0003_create_user_terms_agreements"),
        ("candidates", "0004_add_trusted_to_merge_group"),
        ("candidates", "0005_add_trusted_to_lock_group"),
        ("candidates", "0006_auto_add_trusted_to_rename_group"),
        ("candidates", "0007_add_result_recorders_group"),
        (
            "candidates",
            "0008_membershipextra_organizationextra_personextra_postextra",
        ),
        ("candidates", "0009_migrate_to_django_popolo"),
        ("candidates", "0010_loggedaction_person"),
        ("candidates", "0011_migrate_loggedaction_person"),
        ("candidates", "0012_remove_loggedaction_popit_person_id"),
        ("candidates", "0013_remove_max_popit_ids"),
        ("candidates", "0014_make_extra_slugs_unique"),
        ("candidates", "0015_add_configurable_extra_fields"),
        ("candidates", "0016_migrate_data_to_extra_fields"),
        ("candidates", "0017_remove_cv_and_program_fields"),
        ("candidates", "0018_cr_add_important_posts_field"),
        ("candidates", "0019_add_yesno_to_extra_field_types"),
        ("candidates", "0020_cr_add_reelection_field"),
        ("candidates", "0021_simplepopolofield"),
        ("candidates", "0022_create_standard_simple_fields"),
        ("candidates", "0023_create_post_to_elections_m2m_with_extra_fields"),
        ("candidates", "0024_port_existing_post_to_election_m2m_data"),
        ("candidates", "0025_remove_old_post_to_election_m2m_and_rename_new"),
        ("candidates", "0026_complexpopolofield"),
        ("candidates", "0027_create_standard_complex_fields"),
        ("candidates", "0028_create_order_attr_of_extra"),
        ("candidates", "0029_add_ordering_to_fields_meta"),
        ("candidates", "0028_auto_20160411_1055"),
        ("candidates", "0030_merge"),
        ("candidates", "0031_loggedaction_post"),
        ("candidates", "0032_migrate_org_slugs"),
        ("candidates", "0033_postextraelection_candidates_locked"),
        ("candidates", "0034_candidates_locked_data"),
        ("candidates", "0035_remove_postextra_candidates_locked"),
        ("candidates", "0036_postextra_election_unique_togther"),
        ("candidates", "0037_auto_20170510_2200"),
        ("candidates", "0038_postextraelection_ballot_paper_id"),
        ("candidates", "0039_create_ballot_paper_ids_and_set_unique"),
        ("candidates", "0040_membershipextra_post_election"),
        ("candidates", "0041_auto_20180323_1400"),
        ("candidates", "0042_loggedaction_post_election"),
        ("candidates", "0043_remove_simple_popolo_field"),
        ("candidates", "0044_remove_membership_fk_to_election"),
        ("candidates", "0045_delete_membership_extra"),
        ("candidates", "0046_delete_person_extra"),
        ("candidates", "0047_add_post_to_pee"),
        ("candidates", "0048_move_pee_postextra_to_post"),
        ("candidates", "0049_cleanup_post_extra"),
        ("candidates", "0050_delete_imageextra"),
        ("candidates", "0051_remove_areaextra"),
        ("candidates", "0052_python_3_changes"),
        ("candidates", "0053_move_person_fk_to_people_app"),
        ("candidates", "0054_postextraelection_cancelled"),
        ("candidates", "0055_delete_complexpopolofield"),
        ("candidates", "0056_tmp_ids_to_ballot_id"),
        ("candidates", "0057_remove_extra_field"),
        ("candidates", "0058_pee_to_ballot"),
        ("candidates", "0059_rename_logged_action_fk_to_ballot"),
        ("candidates", "0060_add_flagged_type"),
        ("candidates", "0061_positive_int_field"),
        ("candidates", "0062_loggedaction_edit_type"),
        ("candidates", "0063_populate_loggedaction_edit_types"),
        ("candidates", "0064_loggedaction_approved"),
        ("candidates", "0065_ballot_replaces"),
        ("candidates", "0066_drop_unique_on_election_post"),
        ("candidates", "0067_ballot_tags"),
        ("candidates", "0068_add_blank_to_tags"),
        ("candidates", "0069_ballot_voting_system"),
        ("candidates", "0070_auto_20210617_1506"),
        ("candidates", "0071_add_created_data"),
        ("candidates", "0072_alter_ballot_options"),
        ("candidates", "0073_alter_loggedaction_action_type"),
        ("candidates", "0074_auto_20211006_1027"),
        ("candidates", "0075_use_jsonfield_from_django"),
        ("candidates", "0076_ballot_ee_modified"),
        ("candidates", "0077_loggedaction_person_pk"),
        ("candidates", "0078_populate_person_pk_on_loggedaction"),
        ("candidates", "0079_change_logged_action_person_on_delete"),
        ("candidates", "0080_add_person_delete_action_type"),
    ]

    initial = True

    dependencies = [
        ("popolo", "0012_move_post_extra_data_to_base"),
        ("results", "0023_migrate_winner_party_to_party_model"),
        ("popolo", "0010_rename_not_standing_related_name"),
        ("popolo", "0002_update_models_from_upstream"),
        ("uk_results", "0047_auto_20180501_1359"),
        ("uk", "0005_add_favourite_biscuits"),
        ("official_documents", "0024_add_relevant_pages"),
        ("people", "0014_remove_person_email"),
        ("popolo", "0004_move-extra-data-to-base"),
        ("people", "0009_copy_popolo_fields_to_person_identifiers"),
        ("people", "0033_auto_20210928_1007"),
        ("people", "0004_move_person_data"),
        ("popolo", "0022_populate_person_image_from_image"),
        ("elections", "0012_election_people_elected_per_post"),
        ("official_documents", "0020_add_post_election_values"),
        ("elections", "0003_allow_null_winner_membership_role"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ("uk", "0004_add_biography"),
        ("popolo", "0009_move_extra_person_data_to_base"),
        ("moderation_queue", "0022_add_detection_metadata"),
    ]

    operations = [
        migrations.CreateModel(
            name="LoggedAction",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("action_type", models.CharField(max_length=64)),
                ("popit_person_new_version", models.CharField(max_length=32)),
                ("popit_person_id", models.CharField(max_length=256)),
                ("created", models.DateTimeField(auto_now_add=True)),
                ("updated", models.DateTimeField(auto_now=True)),
                (
                    "ip_address",
                    models.CharField(blank=True, max_length=50, null=True),
                ),
                ("source", models.TextField()),
                (
                    "user",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="MaxPopItIds",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("popit_collection_name", models.CharField(max_length=255)),
                ("max_id", models.IntegerField(default=0)),
            ],
        ),
        migrations.CreateModel(
            name="PersonRedirect",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("old_person_id", models.IntegerField()),
                ("new_person_id", models.IntegerField()),
            ],
        ),
        migrations.CreateModel(
            name="UserTermsAgreement",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("assigned_to_dc", models.BooleanField(default=False)),
                (
                    "user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="terms_agreement",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.RunPython(code=create_user_terms_agreements),
        migrations.RunPython(
            code=add_trusted_to_merge_group,
            reverse_code=remove_trusted_to_merge_group,
        ),
        migrations.RunPython(
            code=add_trusted_to_lock_group,
            reverse_code=remove_trusted_to_lock_group,
        ),
        migrations.RunPython(
            code=add_trusted_to_rename_group,
            reverse_code=remove_trusted_to_rename_group,
        ),
        migrations.RunPython(
            code=add_result_recorders_group,
            reverse_code=remove_result_recorders_group,
        ),
        migrations.CreateModel(
            name="MembershipExtra",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "base",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="extra",
                        to="popolo.membership",
                    ),
                ),
                (
                    "election",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="candidacies",
                        to="elections.election",
                    ),
                ),
                ("party_list_position", models.IntegerField(null=True)),
                ("elected", models.NullBooleanField()),
            ],
        ),
        migrations.CreateModel(
            name="OrganizationExtra",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("register", models.CharField(blank=True, max_length=512)),
                (
                    "base",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="extra",
                        to="popolo.organization",
                    ),
                ),
                ("slug", models.CharField(blank=True, max_length=256)),
            ],
        ),
        migrations.CreateModel(
            name="PersonExtra",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("cv", models.TextField(blank=True)),
                ("program", models.TextField(blank=True)),
                ("versions", models.TextField(blank=True)),
                (
                    "base",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="extra",
                        to="popolo.person",
                    ),
                ),
                (
                    "not_standing",
                    models.ManyToManyField(
                        related_name="persons_not_standing",
                        to="elections.Election",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="PartySet",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("slug", models.CharField(max_length=256)),
                ("name", models.CharField(max_length=1024)),
                (
                    "parties",
                    models.ManyToManyField(
                        related_name="party_sets", to="popolo.Organization"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="PostExtra",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "base",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="extra",
                        to="popolo.post",
                    ),
                ),
                ("slug", models.CharField(blank=True, max_length=256)),
                ("candidates_locked", models.BooleanField(default=False)),
                (
                    "elections",
                    models.ManyToManyField(
                        related_name="posts", to="elections.Election"
                    ),
                ),
                ("group", models.CharField(blank=True, max_length=1024)),
                (
                    "party_set",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="candidates.partyset",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="AreaExtra",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "base",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="extra",
                        to="popolo.area",
                    ),
                ),
                (
                    "type",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="areas",
                        to="elections.areatype",
                    ),
                ),
            ],
        ),
        migrations.RunPython(
            code=django.db.migrations.operations.special.RunPython.noop,
            reverse_code=django.db.migrations.operations.special.RunPython.noop,
        ),
        migrations.AddField(
            model_name="loggedaction",
            name="person",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to="popolo.person",
            ),
        ),
        migrations.RunPython(code=popit_to_db, reverse_code=db_to_popit),
        migrations.RemoveField(
            model_name="loggedaction", name="popit_person_id"
        ),
        migrations.DeleteModel(name="MaxPopItIds"),
        migrations.AlterField(
            model_name="organizationextra",
            name="slug",
            field=models.CharField(blank=True, max_length=256, unique=True),
        ),
        migrations.AlterField(
            model_name="partyset",
            name="slug",
            field=models.CharField(max_length=256, unique=True),
        ),
        migrations.AlterField(
            model_name="postextra",
            name="slug",
            field=models.CharField(blank=True, max_length=256, unique=True),
        ),
        migrations.CreateModel(
            name="ExtraField",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("key", models.CharField(max_length=256)),
                (
                    "type",
                    models.CharField(
                        choices=[
                            (b"line", b"A single line of text"),
                            (b"longer-text", b"One or more paragraphs of text"),
                            (b"url", b"A URL"),
                        ],
                        max_length=64,
                    ),
                ),
                ("label", models.CharField(max_length=1024)),
            ],
        ),
        migrations.CreateModel(
            name="PersonExtraFieldValue",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("value", models.TextField(blank=True)),
                (
                    "field",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="candidates.extrafield",
                    ),
                ),
                (
                    "person",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="extra_field_values",
                        to="popolo.person",
                    ),
                ),
            ],
            options={"unique_together": {("person", "field")}},
        ),
        migrations.RunPython(
            code=django.db.migrations.operations.special.RunPython.noop,
            reverse_code=django.db.migrations.operations.special.RunPython.noop,
        ),
        migrations.RemoveField(model_name="personextra", name="cv"),
        migrations.RemoveField(model_name="personextra", name="program"),
        migrations.RunPython(
            code=django.db.migrations.operations.special.RunPython.noop,
            reverse_code=django.db.migrations.operations.special.RunPython.noop,
        ),
        migrations.AlterField(
            model_name="extrafield",
            name="type",
            field=models.CharField(
                choices=[
                    (b"line", b"A single line of text"),
                    (b"longer-text", b"One or more paragraphs of text"),
                    (b"url", b"A URL"),
                    (b"yesno", b"A Yes/No/Don't know dropdown"),
                ],
                max_length=64,
            ),
        ),
        migrations.RunPython(
            code=django.db.migrations.operations.special.RunPython.noop,
            reverse_code=django.db.migrations.operations.special.RunPython.noop,
        ),
        migrations.CreateModel(
            name="SimplePopoloField",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        choices=[
                            (b"name", "Name"),
                            (b"family_name", "Family Name"),
                            (b"given_name", "Given Name"),
                            (b"additional_name", "Additional Name"),
                            (b"honorific_prefix", "Honorific Prefix"),
                            (b"honorific_suffix", "Honorific Suffix"),
                            (b"patronymic_name", "Patronymic Name"),
                            (b"sort_name", "Sort Name"),
                            (b"email", "Email"),
                            (b"gender", "Gender"),
                            (b"birth_date", "Birth Date"),
                            (b"death_date", "Death Date"),
                            (b"summary", "Summary"),
                            (b"biography", "Biography"),
                            (b"national_identity", "National Identity"),
                        ],
                        max_length=256,
                    ),
                ),
                ("label", models.CharField(max_length=256)),
                ("required", models.BooleanField(default=False)),
                (
                    "info_type_key",
                    models.CharField(
                        choices=[
                            (b"text", "Text Field"),
                            (b"email", "Email Field"),
                        ],
                        max_length=256,
                    ),
                ),
                ("order", models.IntegerField(blank=True)),
            ],
        ),
        migrations.RunPython(code=create_simple_fields),
        migrations.CreateModel(
            name="PostExtraElection",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("winner_count", models.IntegerField(blank=True, null=True)),
                (
                    "election",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="elections.election",
                    ),
                ),
                (
                    "postextra",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="candidates.postextra",
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="postextra",
            name="new_elections",
            field=models.ManyToManyField(
                related_name="new_posts",
                through="candidates.PostExtraElection",
                to="elections.Election",
            ),
        ),
        migrations.RunPython(
            code=old_post_election_m2m_to_new,
            reverse_code=new_post_election_m2m_to_old,
        ),
        migrations.RemoveField(model_name="postextra", name="elections"),
        migrations.RenameField(
            model_name="PostExtra",
            old_name="new_elections",
            new_name="elections",
        ),
        migrations.AlterField(
            model_name="postextra",
            name="elections",
            field=models.ManyToManyField(
                related_name="posts",
                through="candidates.PostExtraElection",
                to="elections.Election",
            ),
        ),
        migrations.CreateModel(
            name="ComplexPopoloField",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=256)),
                (
                    "label",
                    models.CharField(
                        help_text="User facing description of the information",
                        max_length=256,
                    ),
                ),
                (
                    "popolo_array",
                    models.CharField(
                        choices=[
                            ("links", "Links"),
                            ("contact_details", "Contact Details"),
                            ("identifier", "Identifier"),
                        ],
                        help_text="Name of the Popolo related type",
                        max_length=256,
                    ),
                ),
                (
                    "field_type",
                    models.CharField(
                        choices=[
                            ("text", "Text Field"),
                            ("url", "URL Field"),
                            ("email", "Email Field"),
                        ],
                        help_text="Type of HTML field the user will see",
                        max_length=256,
                    ),
                ),
                (
                    "info_type_key",
                    models.CharField(
                        help_text="Name of the field in the array that stores the type (note for links, contact_type for contacts, scheme for identifiers)",
                        max_length=100,
                    ),
                ),
                (
                    "info_type",
                    models.CharField(
                        help_text="Value to put in the info_type_key e.g. twitter",
                        max_length=100,
                    ),
                ),
                ("old_info_type", models.CharField(blank=True, max_length=100)),
                (
                    "info_value_key",
                    models.CharField(
                        help_text="Name of the field in the array that stores the value, e.g url for links, value for contact_type, identifier for identifiers",
                        max_length=100,
                    ),
                ),
                ("order", models.IntegerField(blank=True, default=0)),
            ],
        ),
        migrations.RunPython(
            code=create_complex_fields, reverse_code=remove_standard_fields
        ),
        migrations.AddField(
            model_name="extrafield",
            name="order",
            field=models.IntegerField(blank=True, default=0),
        ),
        migrations.AlterModelOptions(
            name="complexpopolofield", options={"ordering": ("order",)}
        ),
        migrations.AlterModelOptions(
            name="extrafield", options={"ordering": ("order",)}
        ),
        migrations.AlterModelOptions(
            name="simplepopolofield", options={"ordering": ("order",)}
        ),
        migrations.AlterField(
            model_name="complexpopolofield",
            name="info_type_key",
            field=models.CharField(
                help_text="Name of the field in the array that stores the type ('note' for links, 'contact_type' for contacts, 'scheme' for identifiers)",
                max_length=100,
            ),
        ),
        migrations.AlterField(
            model_name="complexpopolofield",
            name="info_value_key",
            field=models.CharField(
                help_text="Name of the field in the array that stores the value, e.g 'url' for links, 'value' for contact_type, 'identifier' for identifiers",
                max_length=100,
            ),
        ),
        migrations.AlterField(
            model_name="complexpopolofield",
            name="old_info_type",
            field=models.CharField(
                blank=True,
                help_text="Used for supporting info_types that have been renamed. As such it's rarely used.",
                max_length=100,
            ),
        ),
        migrations.AddField(
            model_name="loggedaction",
            name="post",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to="popolo.post",
            ),
        ),
        migrations.RunPython(
            code=add_classification_to_slugs,
            reverse_code=remove_classification_from_slugs,
        ),
        migrations.AddField(
            model_name="postextraelection",
            name="candidates_locked",
            field=models.BooleanField(default=False),
        ),
        migrations.RunPython(
            code=move_candidates_locked_to_postextraelection,
            reverse_code=move_candidates_locked_to_postextra,
        ),
        migrations.RemoveField(
            model_name="postextra", name="candidates_locked"
        ),
        migrations.AlterUniqueTogether(
            name="postextraelection",
            unique_together={("election", "postextra")},
        ),
        migrations.AlterField(
            model_name="loggedaction",
            name="created",
            field=models.DateTimeField(auto_now_add=True, db_index=True),
        ),
        migrations.AddField(
            model_name="postextraelection",
            name="ballot_paper_id",
            field=models.CharField(blank=True, max_length=255),
        ),
        migrations.RunPython(
            code=create_tmp_ballot_paper_id_from_pee, reverse_code=do_nothing
        ),
        migrations.AlterField(
            model_name="postextraelection",
            name="ballot_paper_id",
            field=models.CharField(blank=True, max_length=255, unique=True),
        ),
        migrations.AddField(
            model_name="membershipextra",
            name="post_election",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to="candidates.postextraelection",
            ),
        ),
        migrations.RunPython(
            code=populate_post_election_from_membership, reverse_code=do_nothing
        ),
        migrations.AlterField(
            model_name="membershipextra",
            name="post_election",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                to="candidates.postextraelection",
            ),
        ),
        migrations.AddField(
            model_name="loggedaction",
            name="post_election",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to="candidates.postextraelection",
            ),
        ),
        migrations.DeleteModel(name="SimplePopoloField"),
        migrations.DeleteModel(name="MembershipExtra"),
        migrations.DeleteModel(name="PersonExtra"),
        migrations.AddField(
            model_name="postextraelection",
            name="post",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to="popolo.post",
            ),
        ),
        migrations.RunPython(
            code=add_extra_fields_to_base,
            reverse_code=django.db.migrations.operations.special.RunPython.noop,
        ),
        migrations.AlterUniqueTogether(
            name="postextraelection", unique_together={("election", "post")}
        ),
        migrations.RemoveField(
            model_name="postextraelection", name="postextra"
        ),
        migrations.AlterField(
            model_name="postextraelection",
            name="post",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="popolo.post"
            ),
        ),
        migrations.DeleteModel(name="PostExtra"),
        migrations.DeleteModel(name="OrganizationExtra"),
        migrations.DeleteModel(name="AreaExtra"),
        migrations.AlterField(
            model_name="extrafield",
            name="type",
            field=models.CharField(
                choices=[
                    ("line", "A single line of text"),
                    ("longer-text", "One or more paragraphs of text"),
                    ("url", "A URL"),
                    ("yesno", "A Yes/No/Don't know dropdown"),
                ],
                max_length=64,
            ),
        ),
        migrations.AlterField(
            model_name="loggedaction",
            name="person",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to="people.person",
            ),
        ),
        migrations.AlterField(
            model_name="personextrafieldvalue",
            name="person",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="extra_field_values",
                to="people.person",
            ),
        ),
        migrations.AddField(
            model_name="postextraelection",
            name="cancelled",
            field=models.BooleanField(default=False),
        ),
        migrations.DeleteModel(name="ComplexPopoloField"),
        migrations.RunPython(
            code=move_tmp_ids_to_actual_ids,
            reverse_code=django.db.migrations.operations.special.RunPython.noop,
        ),
        migrations.AlterUniqueTogether(
            name="personextrafieldvalue", unique_together=set()
        ),
        migrations.RemoveField(
            model_name="personextrafieldvalue", name="field"
        ),
        migrations.RemoveField(
            model_name="personextrafieldvalue", name="person"
        ),
        migrations.DeleteModel(name="ExtraField"),
        migrations.DeleteModel(name="PersonExtraFieldValue"),
        migrations.RenameModel(old_name="PostExtraElection", new_name="Ballot"),
        migrations.RenameField(
            model_name="loggedaction",
            old_name="post_election",
            new_name="ballot",
        ),
        migrations.AddField(
            model_name="loggedaction",
            name="flagged_reason",
            field=models.CharField(
                blank=True,
                help_text="An explaination of the reason for flagging this edit",
                max_length=255,
            ),
        ),
        migrations.AddField(
            model_name="loggedaction",
            name="flagged_type",
            field=models.CharField(
                blank=True,
                help_text="If NOT NULL, a type of flag that marks this edit as needing review by a human",
                max_length=100,
            ),
        ),
        migrations.AlterField(
            model_name="ballot",
            name="winner_count",
            field=models.PositiveSmallIntegerField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name="loggedaction",
            name="edit_type",
            field=models.CharField(
                choices=[
                    ("USER", "User"),
                    ("BOT", "Bot"),
                    ("BULK_ADD", "Bulk Add"),
                ],
                default="USER",
                max_length=20,
            ),
        ),
        migrations.RunPython(
            code=populate_edit_types,
            reverse_code=django.db.migrations.operations.special.RunPython.noop,
        ),
        migrations.AddField(
            model_name="loggedaction",
            name="approved",
            field=django.contrib.postgres.fields.jsonb.JSONField(null=True),
        ),
        migrations.AddField(
            model_name="ballot",
            name="replaces",
            field=models.OneToOneField(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="replaced_by",
                to="candidates.ballot",
            ),
        ),
        migrations.AlterUniqueTogether(name="ballot", unique_together=set()),
        migrations.AddField(
            model_name="ballot",
            name="tags",
            field=django.contrib.postgres.fields.jsonb.JSONField(
                blank=True, default=dict
            ),
        ),
        migrations.AddField(
            model_name="ballot",
            name="voting_system",
            field=models.CharField(blank=True, max_length=255),
        ),
        migrations.AlterModelOptions(
            name="ballot",
            options={
                "get_latest_by": "modified",
                "ordering": ("-modified", "-created"),
            },
        ),
        migrations.AddField(
            model_name="ballot",
            name="created",
            field=django_extensions.db.fields.CreationDateTimeField(
                auto_now_add=True,
                default=django.utils.timezone.now,
                verbose_name="created",
            ),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name="ballot",
            name="modified",
            field=django_extensions.db.fields.ModificationDateTimeField(
                auto_now=True, verbose_name="modified"
            ),
        ),
        migrations.RunPython(
            code=django.db.migrations.operations.special.RunPython.noop,
            reverse_code=django.db.migrations.operations.special.RunPython.noop,
        ),
        migrations.AlterModelOptions(
            name="ballot", options={"get_latest_by": "modified"}
        ),
        migrations.AlterField(
            model_name="loggedaction",
            name="action_type",
            field=models.CharField(
                choices=[
                    ("entered-results-data", "Entered results"),
                    ("set-candidate-elected", "Set Candidate elected"),
                    ("set-candidate-not-elected", "Set Candidate not elected"),
                    ("person-lock", "Person locked"),
                    ("person-update", "Person updated"),
                    ("person-create", "Person created"),
                    ("person-other-name-create", "Person Other name created"),
                    ("person-other-name-delete", "Person Other name deleted"),
                    ("person-other-name-update", "Person Other name updated"),
                    ("person-revert", "Person reverted"),
                    ("constituency-lock", "Constituency locked"),
                    ("constituency-unlock", "Constituency unlocked"),
                    ("candidacy-create", "Candidacy created"),
                    ("candidacy-delete", "Candidacy deleted"),
                    ("photo-approve", "Photo approved"),
                    ("photo-upload", "Photo uploaded"),
                    ("photo-reject", "Photo rejected"),
                    ("photo-ignore", "Photo ignored"),
                    ("suggest-ballot-lock", "Suggested ballot lock"),
                    ("person-merge", "Person merged"),
                    ("record-council-result", "Recorded council result"),
                    ("confirm-council-result", "Confirmed council result "),
                    ("sopn-upload", "SOPN uploaded"),
                    ("record-council-control", "Recorded council control"),
                    ("confirm-council-control", "Confirmed council control"),
                    ("retract-winner", "Retracted winner"),
                    ("duplicate-suggest", "Duplicate suggested"),
                    ("change-edit-limitations", "Changed edit limitations"),
                    ("suspended-twitter-account", "Suspended Twitter account"),
                ],
                max_length=64,
            ),
        ),
        migrations.RunPython(
            code=django.db.migrations.operations.special.RunPython.noop,
            reverse_code=django.db.migrations.operations.special.RunPython.noop,
        ),
        migrations.AlterField(
            model_name="ballot",
            name="tags",
            field=models.JSONField(blank=True, default=dict),
        ),
        migrations.AlterField(
            model_name="loggedaction",
            name="approved",
            field=models.JSONField(null=True),
        ),
        migrations.AddField(
            model_name="ballot",
            name="ee_modified",
            field=models.DateTimeField(
                blank=True,
                help_text="Stores the modified timestamp from EE",
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="ballot",
            name="modified",
            field=django_extensions.db.fields.ModificationDateTimeField(
                auto_now=True, db_index=True, verbose_name="modified"
            ),
        ),
        migrations.AddField(
            model_name="loggedaction",
            name="person_pk",
            field=models.PositiveIntegerField(
                blank=True,
                help_text="This is stored to help us identify the related person an action was for after the Person has been deleted",
                null=True,
            ),
        ),
        migrations.RunPython(
            code=django.db.migrations.operations.special.RunPython.noop,
            reverse_code=django.db.migrations.operations.special.RunPython.noop,
        ),
        migrations.AlterField(
            model_name="loggedaction",
            name="person",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to="people.person",
            ),
        ),
        migrations.AlterField(
            model_name="loggedaction",
            name="action_type",
            field=models.CharField(
                choices=[
                    ("entered-results-data", "Entered results"),
                    ("set-candidate-elected", "Set Candidate elected"),
                    ("set-candidate-not-elected", "Set Candidate not elected"),
                    ("person-lock", "Person locked"),
                    ("person-update", "Person updated"),
                    ("person-create", "Person created"),
                    ("person-delete", "Person deleted"),
                    ("person-other-name-create", "Person Other name created"),
                    ("person-other-name-delete", "Person Other name deleted"),
                    ("person-other-name-update", "Person Other name updated"),
                    ("person-revert", "Person reverted"),
                    ("constituency-lock", "Constituency locked"),
                    ("constituency-unlock", "Constituency unlocked"),
                    ("candidacy-create", "Candidacy created"),
                    ("candidacy-delete", "Candidacy deleted"),
                    ("photo-approve", "Photo approved"),
                    ("photo-upload", "Photo uploaded"),
                    ("photo-reject", "Photo rejected"),
                    ("photo-ignore", "Photo ignored"),
                    ("suggest-ballot-lock", "Suggested ballot lock"),
                    ("person-merge", "Person merged"),
                    ("record-council-result", "Recorded council result"),
                    ("confirm-council-result", "Confirmed council result "),
                    ("sopn-upload", "SOPN uploaded"),
                    ("record-council-control", "Recorded council control"),
                    ("confirm-council-control", "Confirmed council control"),
                    ("retract-winner", "Retracted winner"),
                    ("duplicate-suggest", "Duplicate suggested"),
                    ("change-edit-limitations", "Changed edit limitations"),
                    ("suspended-twitter-account", "Suspended Twitter account"),
                ],
                max_length=64,
            ),
        ),
    ]
