# Generated by Django 4.2.10 on 2024-03-26 14:26
from django.db import migrations
from django.db.models import Count
from official_documents.extract_pages import (
    ElectionSOPNDocument,
    ElectionSOPNPageSplitter,
    PDFProcessingError,
)


def move_official_documents_to_ballot_sopn(apps, schema_editor):
    OfficialDocument = apps.get_model("official_documents", "OfficialDocument")
    ElectionSOPN = apps.get_model("official_documents", "ElectionSOPN")
    BallotSOPN = apps.get_model("official_documents", "BallotSOPN")
    BallotSOPNHistory = apps.get_model(
        "official_documents", "BallotSOPNHistory"
    )

    def _move_od_to_ballot_sopn(qs):
        """
        Moves Official Documents to a BallotSOPN

        (function to DRY up two methods of doing this)

        """
        for official_document in qs:
            ballot = official_document.ballot
            BallotSOPNHistory.objects.create(
                ballot=ballot,
                uploaded_file=official_document.uploaded_file,
                source_url=official_document.source_url,
            )
            BallotSOPN.objects.filter(ballot=ballot).delete()
            BallotSOPN.objects.create(
                ballot=ballot,
                uploaded_file=official_document.uploaded_file,
                source_url=official_document.source_url,
            )

    # 1. Easy case: move the OfficialDocuments to BallotSOPNs when all pages are for one ballot
    # Get the SOPN where all pages relate to a single ballot
    qs = OfficialDocument.objects.filter(relevant_pages="all").order_by(
        "created"
    )
    _move_od_to_ballot_sopn(qs)

    qs = (
        OfficialDocument.objects.values("source_url")
        .annotate(ballot_count=Count("ballot"))
        .order_by("source_url")
        .filter(ballot_count=1)
    )
    for grouped in qs:
        single_source_qs = OfficialDocument.objects.filter(
            source_url=grouped["source_url"]
        )
        _move_od_to_ballot_sopn(single_source_qs)

    # Now the tricky one: Make a single ElectionSOPN and split the PDF up into BallotSOPNs
    qs = (
        OfficialDocument.objects.values("source_url")
        .annotate(ballot_count=Count("ballot"))
        .order_by("source_url")
        .filter(ballot_count__gt=1)
        .exclude(relevant_pages="all")
    )

    for grouped in qs:
        single_source_qs = OfficialDocument.objects.filter(
            source_url=grouped["source_url"]
        ).exclude(relevant_pages="all")
        od = single_source_qs.first()
        election_sopn, _ = ElectionSOPN.objects.update_or_create(
            election=od.ballot.election,
            defaults={
                "source_url": grouped["source_url"],
                "uploaded_file": od.uploaded_file,
            },
        )
        splitter_data = {}
        for od in single_source_qs:
            splitter_data[od.ballot.ballot_paper_id] = [
                int(page) for page in od.relevant_pages.split(",") if page
            ]

        try:
            # Re-parse and split where we've not previously matched all pages
            if not all(splitter_data.values()):
                election_sopn_doc = ElectionSOPNDocument(
                    election_sopn=election_sopn
                )
                election_sopn_doc.match_all_pages()
                continue

            splitter = ElectionSOPNPageSplitter(
                election_sopn=election_sopn, ballot_to_pages=splitter_data
            )
            splitter.split()
        except IndexError:
            # Sometimes the matching is off. Re-match and try again
            election_sopn_doc = ElectionSOPNDocument(
                election_sopn=election_sopn
            )
            election_sopn_doc.match_all_pages()
        except PDFProcessingError as exception:
            print(f"Invalid PDF for : {od.ballot.election}: {exception}")
            continue
        except FileNotFoundError:
            print(f"Can't find file {election_sopn.uploaded_file.url}")


class Migration(migrations.Migration):
    dependencies = [
        ("official_documents", "0034_ballotsopn_relevant_pages_and_more"),
    ]

    operations = [
        migrations.RunPython(
            move_official_documents_to_ballot_sopn, migrations.RunPython.noop
        )
    ]
