# Generated by Django 3.2.10 on 2021-12-15 11:07

from django.db import migrations, models
import django.db.migrations.operations.special
import django.db.models.deletion
import django.utils.timezone
import django_extensions.db.fields
from datetime import date

from django.conf import settings


# Functions from the following migrations need manual copying.
# Move them and any dependencies into this file, then update the
# RunPython operations to refer to the local versions:
# elections.migrations.0002_auto_20151012_1731
# elections.migrations.0005_migrate_to_popolo_organizations
# elections.migrations.0014_cleanup_for_post_role
# elections.migrations.0016_positive_int_field
# elections.migrations.0019_add_created


def load_election_data(apps, schema_editor):
    Election = apps.get_model("elections", "Election")
    AreaType = apps.get_model("elections", "AreaType")
    db_alias = schema_editor.connection.alias
    if settings.ELECTION_APP == "uk_general_election_2015":
        area, created = AreaType.objects.using(db_alias).get_or_create(
            name="WMC"
        )

        Election.objects.using(db_alias).bulk_create(
            [
                Election(
                    candidate_membership_role="Candidate",
                    use_for_candidate_suggestions=False,
                    name="2015 General Election",
                    election_date=date(2015, 5, 7),
                    organization_name="House of Commons",
                    area_generation="22",
                    winner_membership_role="",
                    current=True,
                    party_membership_end_date=date(9999, 12, 31),
                    post_id_format="{area_id}",
                    candidacy_start_date=date(2010, 5, 7),
                    party_membership_start_date=date(2010, 5, 7),
                    organization_id="commons",
                    slug="2015",
                    for_post_role="Member of Parliament",
                    description="2015 General Election",
                    show_official_documents=True,
                ),
                Election(
                    candidate_membership_role="Candidate",
                    use_for_candidate_suggestions=True,
                    name="2010 General Election",
                    election_date=date(2010, 5, 6),
                    organization_name="House of Commons",
                    area_generation="22",
                    winner_membership_role="",
                    for_post_role="Member of Parliament",
                    current=False,
                    party_membership_end_date=date(2010, 5, 6),
                    post_id_format="{area_id}",
                    candidacy_start_date=date(2005, 5, 6),
                    party_membership_start_date=date(2005, 5, 6),
                    organization_id="commons",
                    slug="2010",
                    description="2010 General Election",
                    show_official_documents=True,
                ),
            ]
        )
        for election in Election.objects.using(db_alias).all():
            election.area_types.add(area)

    elif settings.ELECTION_APP == "ar_elections_2015":
        prv, created = AreaType.objects.using(db_alias).get_or_create(
            name="PRV"
        )
        nat, created = AreaType.objects.using(db_alias).get_or_create(
            name="NAT"
        )

        Election.objects.using(db_alias).bulk_create(
            [
                Election(
                    slug="diputados-argentina-paso-2015",
                    for_post_role="Diputado Nacional",
                    candidate_membership_role="Primary Candidate",
                    winner_membership_role="Candidate",
                    election_date=date(2015, 8, 9),
                    candidacy_start_date=date(2015, 6, 22),
                    name="Diputados Nacionales PASO 2015",
                    current=True,
                    use_for_candidate_suggestions=False,
                    party_membership_start_date=date(2015, 6, 22),
                    party_membership_end_date=date(9999, 12, 31),
                    area_generation="1",
                    organization_id="hcdn",
                    organization_name="Cámara de Diputados",
                    post_id_format="dip-{area_id}",
                ),
                Election(
                    slug="gobernadores-argentina-paso-2015",
                    for_post_role="Gobernador",
                    candidate_membership_role="Primary Candidate",
                    winner_membership_role="Candidate",
                    election_date=date(2015, 8, 9),
                    candidacy_start_date=date(2015, 6, 22),
                    name="Gobernador PASO 2015",
                    current=True,
                    party_membership_start_date=date(2015, 6, 22),
                    party_membership_end_date=date(9999, 12, 31),
                    area_generation="1",
                    organization_id="gobernador",
                    organization_name="Gobernador",
                    post_id_format="gob-{area_id}",
                ),
                Election(
                    slug="senadores-argentina-paso-2015",
                    for_post_role="Senador Nacional",
                    candidate_membership_role="Primary Candidate",
                    winner_membership_role="Candidate",
                    election_date=date(2015, 8, 9),
                    candidacy_start_date=date(2015, 6, 22),
                    name="Senadores Nacionales PASO 2015",
                    current=True,
                    party_membership_start_date=date(2015, 6, 22),
                    party_membership_end_date=date(9999, 12, 31),
                    area_generation="1",
                    organization_id="hcsn",
                    organization_name="Senado de la Nación",
                    post_id_format="sen-{area_id}",
                ),
                Election(
                    slug="presidentes-argentina-paso-2015",
                    for_post_role="Presidente",
                    candidate_membership_role="Primary Candidate",
                    winner_membership_role="Candidate",
                    election_date=date(2015, 8, 9),
                    candidacy_start_date=date(2015, 6, 22),
                    organization_id="pen",
                    organization_name="Presidencia de la Nación Argentina",
                    name="Presidentes PASO 2015",
                    current=True,
                    party_membership_start_date=date(2015, 6, 22),
                    party_membership_end_date=date(9999, 12, 31),
                    area_generation="1",
                    post_id_format="presidente",
                ),
                Election(
                    slug="parlamentarios-mercosur-regional-paso-2015",
                    for_post_role="Parlamentario Mercosur",
                    candidate_membership_role="Primary Candidate",
                    winner_membership_role="Candidate",
                    election_date=date(2015, 8, 9),
                    candidacy_start_date=date(2015, 6, 22),
                    name="Parlamentario Mercosur PASO 2015",
                    current=True,
                    party_membership_start_date=date(2015, 6, 22),
                    party_membership_end_date=date(9999, 12, 31),
                    area_generation=1,
                    organization_id="parlmercosur",
                    organization_name="Parlamento del Mercosur",
                    post_id_format="pmer-{area_id}",
                    party_lists_in_use=True,
                    default_party_list_members_to_show=3,
                ),
                Election(
                    slug="parlamentarios-mercosur-unico-paso-2015",
                    for_post_role="Parlamentario Mercosur",
                    candidate_membership_role="Primary Candidate",
                    winner_membership_role="Candidate",
                    election_date=date(2015, 8, 9),
                    candidacy_start_date=date(2015, 6, 22),
                    name="Parlamentario Mercosur PASO 2015",
                    current=True,
                    party_membership_start_date=date(2015, 6, 22),
                    party_membership_end_date=date(9999, 12, 31),
                    area_generation=1,
                    organization_id="parlmercosur",
                    organization_name="Parlamento del Mercosur",
                    post_id_format="pmeu",
                    party_lists_in_use=True,
                    default_party_list_members_to_show=3,
                ),
            ]
        )

        for election in Election.objects.using(db_alias).all():
            if (
                election.slug == "presidentes-argentina-paso-2015"
                or election.slug == "parlamentarios-mercosur-unico-paso-2015"
            ):
                election.area_types.add(nat)
            else:
                election.area_types.add(prv)

    elif settings.ELECTION_APP == "bf_elections_2015":
        national, created = AreaType.objects.using(db_alias).get_or_create(
            name="NATIONAL"
        )
        province, created = AreaType.objects.using(db_alias).get_or_create(
            name="PROVINCE"
        )

        Election.objects.using(db_alias).bulk_create(
            [
                Election(
                    slug="pres-2015",
                    current=True,
                    for_post_role="Président du Faso",
                    candidate_membership_role="Candidat",
                    election_date=date(2015, 10, 11),
                    candidacy_start_date=date(2010, 11, 22),
                    organization_id="presidence",
                    organization_name="Présidence",
                    party_membership_start_date=date(2010, 11, 22),
                    party_membership_end_date=date(9999, 12, 31),
                    party_lists_in_use=False,
                    name="Elections Présidentielles de 2015",
                    area_generation=2,
                    post_id_format="president",
                    show_official_documents=False,
                ),
                Election(
                    slug="nat-2015",
                    current=True,
                    for_post_role="Député National",
                    candidate_membership_role="Candidat",
                    election_date=date(2015, 10, 11),
                    candidacy_start_date=date(2012, 12, 3),
                    organization_id="assemblee-nationale",
                    organization_name="Assemblée nationale",
                    party_membership_start_date=date(2012, 12, 3),
                    party_membership_end_date=date(9999, 12, 31),
                    party_lists_in_use=True,
                    default_party_list_members_to_show=2,
                    name="Elections Législative de 2015",
                    area_generation=2,
                    post_id_format="nat-{area_id}",
                    show_official_documents=False,
                ),
                Election(
                    slug="prv-2015",
                    current=True,
                    for_post_role="Député Provincial",
                    candidate_membership_role="Candidat",
                    election_date=date(2015, 10, 11),
                    candidacy_start_date=date(2012, 12, 3),
                    organization_id="assemblee-nationale",
                    organization_name="Assemblée nationale",
                    party_membership_start_date=date(2012, 12, 3),
                    party_membership_end_date=date(9999, 12, 31),
                    party_lists_in_use=True,
                    default_party_list_members_to_show=2,
                    name="Elections Législative de 2015",
                    area_generation=2,
                    post_id_format="prv-{area_id}",
                    show_official_documents=False,
                ),
            ]
        )

        for election in Election.objects.using(db_alias).all():
            if election.slug == "prv-2015":
                election.area_types.add(province)
            else:
                election.area_types.add(national)

    elif settings.ELECTION_APP == "st_paul_municipal_2015":
        muni, created = AreaType.objects.using(db_alias).get_or_create(
            name="MUNI"
        )
        ward, created = AreaType.objects.using(db_alias).get_or_create(
            name="WARD"
        )

        Election.objects.using(db_alias).bulk_create(
            [
                Election(
                    slug="council-member-2015",
                    for_post_role="Council Member",
                    candidate_membership_role="Candidate",
                    winner_membership_role="Candidate",
                    election_date=date(2015, 11, 3),
                    candidacy_start_date=date(2015, 6, 22),
                    name="City Council Election",
                    current=True,
                    use_for_candidate_suggestions=False,
                    party_membership_start_date=date(2015, 6, 22),
                    party_membership_end_date=date(9999, 12, 31),
                    party_lists_in_use=False,
                    organization_id="saint-paul-city-council",
                    organization_name="Saint Paul City Council",
                    post_id_format="ocd-division,country:us,state:mn,place:st_paul,ward:{area_id}",
                    ocd_division="ocd-division/country:us/state:mn/place:st_paul/ward",
                    area_generation=1,
                ),
                Election(
                    slug="school-board-2015",
                    for_post_role="School Board Member",
                    candidate_membership_role="Candidate",
                    winner_membership_role="Candidate",
                    election_date=date(2015, 11, 3),
                    candidacy_start_date=date(2015, 6, 22),
                    name="School Board Election",
                    current=True,
                    use_for_candidate_suggestions=False,
                    party_membership_start_date=date(2015, 6, 22),
                    party_membership_end_date=date(9999, 12, 31),
                    party_lists_in_use=False,
                    area_generation=1,
                    organization_id="saint-paul-school-board",
                    organization_name="Saint Paul School Board",
                    post_id_format="ocd-division,country:us,state:mn,place:st_paul",
                    ocd_division="ocd-division/country:us/state:mn/place:st_paul",
                ),
            ]
        )

        for election in Election.objects.using(db_alias).all():
            if election.slug == "council-member-2015":
                election.area_types.add(ward)
            else:
                election.area_types.add(muni)


def migrate_to_popolo_organizations(apps, schema_editor):
    Election = apps.get_model("elections", "Election")
    Organization = apps.get_model("popolo", "Organization")
    OrganizationExtra = apps.get_model("candidates", "OrganizationExtra")
    for e in Election.objects.all():
        # This is a get_or_create, rather than just get, because when
        # running tests with an ELECTION_APP that has a case in
        # 0002_auto_20151012_1731 it will have Election objects with
        # an organization_id set, but no corresponding Organization
        # object.  So that the migration doesn't fail when creating
        # the database for tests, create the organization if it
        # doesn't exist.
        try:
            o_extra = OrganizationExtra.objects.get(slug=e.organization_id)
            o = o_extra.base
        except OrganizationExtra.DoesNotExist:
            o = Organization.objects.create(name=e.organization_name)
            o_extra = OrganizationExtra.objects.create(
                base=o, slug=e.organization_id
            )
        e.new_organization = o
        e.save()


ROLES_BY_TYPE = {
    "parl": "UK Parliament elections",
    "nia": "Northern Ireland Assembly elections",
    "naw": "National Assembly for Wales elections",
    "sp": "Scottish Parliament elections",
    "gla": "Greater London Assembly elections",
    "local": "Local elections",
    "pcc": "Police and Crime Commissioner elections",
    "mayor": "Mayoral elections",
}


def update_for_post_role(apps, schema_editor):
    Election = apps.get_model("elections", "Election")
    for election_type, text in ROLES_BY_TYPE.items():
        Election.objects.filter(slug__startswith=election_type).update(
            for_post_role=text
        )


def set_people_elected_per_post_to_zero(apps, schema_editor):
    Election = apps.get_model("elections", "Election")
    Election.objects.filter(people_elected_per_post__lt=0).update(
        people_elected_per_post=0
    )


class Migration(migrations.Migration):

    replaces = [
        ("elections", "0001_initial"),
        ("elections", "0002_auto_20151012_1731"),
        ("elections", "0003_allow_null_winner_membership_role"),
        ("elections", "0004_election_new_organization"),
        ("elections", "0005_migrate_to_popolo_organizations"),
        ("elections", "0006_remove_old_organization_fields"),
        ("elections", "0007_rename_new_organization_to_organization"),
        ("elections", "0008_remove_artificial_start_and_end_dates"),
        ("elections", "0009_make_election_slug_unique"),
        ("elections", "0010_make_post_id_format_optional"),
        ("elections", "0011_remove_election_post_id_format"),
        ("elections", "0012_election_people_elected_per_post"),
        ("elections", "0013_remove_area"),
        ("elections", "0014_cleanup_for_post_role"),
        ("elections", "0015_election_date_index"),
        ("elections", "0016_positive_int_field"),
        ("elections", "0017_election_modgov_url"),
        ("elections", "0018_add_timestamps_to_election"),
        ("elections", "0019_add_created"),
        ("elections", "0020_alter_election_modified"),
    ]

    initial = True

    dependencies = [
        ("candidates", "0051_remove_areaextra"),
        ("candidates", "0009_migrate_to_django_popolo"),
        ("popolo", "0002_update_models_from_upstream"),
    ]

    operations = [
        migrations.CreateModel(
            name="AreaType",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=128)),
                (
                    "source",
                    models.CharField(
                        blank=True, help_text=b"e.g MapIt", max_length=128
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Election",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("slug", models.CharField(max_length=128)),
                ("for_post_role", models.CharField(max_length=128)),
                (
                    "winner_membership_role",
                    models.CharField(blank=True, max_length=128),
                ),
                ("candidate_membership_role", models.CharField(max_length=128)),
                ("election_date", models.DateField()),
                ("candidacy_start_date", models.DateField()),
                ("name", models.CharField(max_length=128)),
                ("current", models.BooleanField()),
                (
                    "use_for_candidate_suggestions",
                    models.BooleanField(default=False),
                ),
                ("party_membership_start_date", models.DateField()),
                ("party_membership_end_date", models.DateField()),
                (
                    "area_generation",
                    models.CharField(blank=True, max_length=128),
                ),
                ("organization_id", models.CharField(max_length=128)),
                (
                    "organization_name",
                    models.CharField(blank=True, max_length=128),
                ),
                ("post_id_format", models.CharField(max_length=128)),
                ("description", models.CharField(blank=True, max_length=500)),
                ("area_types", models.ManyToManyField(to="elections.AreaType")),
                ("party_lists_in_use", models.BooleanField(default=False)),
                (
                    "default_party_list_members_to_show",
                    models.IntegerField(default=0),
                ),
                ("show_official_documents", models.BooleanField(default=False)),
                ("ocd_division", models.CharField(blank=True, max_length=250)),
            ],
        ),
        migrations.RunPython(code=load_election_data),
        migrations.AlterField(
            model_name="election",
            name="winner_membership_role",
            field=models.CharField(blank=True, max_length=128, null=True),
        ),
        migrations.AddField(
            model_name="election",
            name="new_organization",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to="popolo.organization",
            ),
        ),
        migrations.RunPython(
            code=migrate_to_popolo_organizations,
            reverse_code=django.db.migrations.operations.special.RunPython.noop,
        ),
        migrations.RemoveField(model_name="election", name="organization_id"),
        migrations.RemoveField(model_name="election", name="organization_name"),
        migrations.RenameField(
            model_name="election",
            old_name="new_organization",
            new_name="organization",
        ),
        migrations.RemoveField(
            model_name="election", name="candidacy_start_date"
        ),
        migrations.RemoveField(
            model_name="election", name="party_membership_end_date"
        ),
        migrations.RemoveField(
            model_name="election", name="party_membership_start_date"
        ),
        migrations.AlterField(
            model_name="election",
            name="slug",
            field=models.CharField(max_length=128, unique=True),
        ),
        migrations.RemoveField(model_name="election", name="post_id_format"),
        migrations.AddField(
            model_name="election",
            name="people_elected_per_post",
            field=models.IntegerField(
                default=1,
                help_text="The number of people who are elected to this post in the election.  -1 means a variable number of winners",
            ),
        ),
        migrations.RemoveField(model_name="election", name="area_generation"),
        migrations.RemoveField(model_name="election", name="area_types"),
        migrations.DeleteModel(name="AreaType"),
        migrations.RunPython(
            code=update_for_post_role,
            reverse_code=django.db.migrations.operations.special.RunPython.noop,
        ),
        migrations.AlterField(
            model_name="election",
            name="election_date",
            field=models.DateField(db_index=True),
        ),
        migrations.RunPython(
            code=set_people_elected_per_post_to_zero,
            reverse_code=django.db.migrations.operations.special.RunPython.noop,
        ),
        migrations.AlterField(
            model_name="election",
            name="default_party_list_members_to_show",
            field=models.PositiveSmallIntegerField(default=0),
        ),
        migrations.AlterField(
            model_name="election",
            name="people_elected_per_post",
            field=models.PositiveSmallIntegerField(
                default=1,
                help_text="The number of people who are elected per post in this election. 0 means a variable number of winners",
            ),
        ),
        migrations.AddField(
            model_name="election",
            name="modgov_url",
            field=models.URLField(
                blank=True,
                help_text="Used to store a possible ModGov url that can be used to scrape information for this election",
                null=True,
            ),
        ),
        migrations.AlterModelOptions(
            name="election", options={"get_latest_by": "modified"}
        ),
        migrations.AddField(
            model_name="election",
            name="created",
            field=django_extensions.db.fields.CreationDateTimeField(
                auto_now_add=True,
                default=django.utils.timezone.now,
                verbose_name="created",
            ),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name="election",
            name="ee_modified",
            field=models.DateTimeField(
                blank=True,
                help_text="Stores the modified timestamp from EE",
                null=True,
            ),
        ),
        migrations.AddField(
            model_name="election",
            name="modified",
            field=django_extensions.db.fields.ModificationDateTimeField(
                auto_now=True, verbose_name="modified"
            ),
        ),
        migrations.RunPython(
            code=django.db.migrations.operations.special.RunPython.noop,
            reverse_code=django.db.migrations.operations.special.RunPython.noop,
        ),
        migrations.AlterField(
            model_name="election",
            name="modified",
            field=django_extensions.db.fields.ModificationDateTimeField(
                auto_now=True, db_index=True, verbose_name="modified"
            ),
        ),
    ]
